{"version":3,"sources":["webpack://EVM/webpack/bootstrap","webpack://EVM/./node_modules/big-integer/BigInteger.js","webpack://EVM/./node_modules/ethereumjs-vm/dist/opcodes.js","webpack://EVM/(webpack)/buildin/module.js","webpack://EVM/./src/classes/evm.class.ts","webpack://EVM/./src/classes/stack.class.ts","webpack://EVM/./src/classes/tx.class.ts","webpack://EVM/./src/index.ts","webpack://EVM/./src/opcodes/add.ts","webpack://EVM/./src/opcodes/addmod.ts","webpack://EVM/./src/opcodes/address.ts","webpack://EVM/./src/opcodes/and.ts","webpack://EVM/./src/opcodes/balance.ts","webpack://EVM/./src/opcodes/blockhash.ts","webpack://EVM/./src/opcodes/byte.ts","webpack://EVM/./src/opcodes/call.ts","webpack://EVM/./src/opcodes/callcode.ts","webpack://EVM/./src/opcodes/calldatacopy.ts","webpack://EVM/./src/opcodes/calldataload.ts","webpack://EVM/./src/opcodes/calldatasize.ts","webpack://EVM/./src/opcodes/caller.ts","webpack://EVM/./src/opcodes/callvalue.ts","webpack://EVM/./src/opcodes/codecopy.ts","webpack://EVM/./src/opcodes/codesize.ts","webpack://EVM/./src/opcodes/coinbase.ts","webpack://EVM/./src/opcodes/create.ts","webpack://EVM/./src/opcodes/create2.ts","webpack://EVM/./src/opcodes/delegatecall.ts","webpack://EVM/./src/opcodes/difficulty.ts","webpack://EVM/./src/opcodes/div.ts","webpack://EVM/./src/opcodes/dup.ts","webpack://EVM/./src/opcodes/eq.ts","webpack://EVM/./src/opcodes/exp.ts","webpack://EVM/./src/opcodes/extcodecopy.ts","webpack://EVM/./src/opcodes/extcodehash.ts","webpack://EVM/./src/opcodes/extcodesize.ts","webpack://EVM/./src/opcodes/gas.ts","webpack://EVM/./src/opcodes/gaslimit.ts","webpack://EVM/./src/opcodes/gasprice.ts","webpack://EVM/./src/opcodes/gt.ts","webpack://EVM/./src/opcodes/invalid.ts","webpack://EVM/./src/opcodes/iszero.ts","webpack://EVM/./src/opcodes/jump.ts","webpack://EVM/./src/opcodes/jumpdest.ts","webpack://EVM/./src/opcodes/jumpi.ts","webpack://EVM/./src/opcodes/log.ts","webpack://EVM/./src/opcodes/lt.ts","webpack://EVM/./src/opcodes/mload.ts","webpack://EVM/./src/opcodes/mod.ts","webpack://EVM/./src/opcodes/msize.ts","webpack://EVM/./src/opcodes/mstore.ts","webpack://EVM/./src/opcodes/mul.ts","webpack://EVM/./src/opcodes/mulmod.ts","webpack://EVM/./src/opcodes/not.ts","webpack://EVM/./src/opcodes/number.ts","webpack://EVM/./src/opcodes/or.ts","webpack://EVM/./src/opcodes/origin.ts","webpack://EVM/./src/opcodes/pc.ts","webpack://EVM/./src/opcodes/pop.ts","webpack://EVM/./src/opcodes/push.ts","webpack://EVM/./src/opcodes/return.ts","webpack://EVM/./src/opcodes/returndatacopy.ts","webpack://EVM/./src/opcodes/returndatasize.ts","webpack://EVM/./src/opcodes/revert.ts","webpack://EVM/./src/opcodes/sar.ts","webpack://EVM/./src/opcodes/selfdestruct.ts","webpack://EVM/./src/opcodes/sha3.ts","webpack://EVM/./src/opcodes/shl.ts","webpack://EVM/./src/opcodes/shr.ts","webpack://EVM/./src/opcodes/signextend.ts","webpack://EVM/./src/opcodes/sload.ts","webpack://EVM/./src/opcodes/sstore.ts","webpack://EVM/./src/opcodes/staticcall.ts","webpack://EVM/./src/opcodes/stop.ts","webpack://EVM/./src/opcodes/sub.ts","webpack://EVM/./src/opcodes/swap.ts","webpack://EVM/./src/opcodes/timestamp.ts","webpack://EVM/./src/opcodes/xor.ts","webpack://EVM/./src/utils/hex.ts","webpack://EVM/./src/utils/opcodes.ts","webpack://EVM/./src/utils/stringify.ts","webpack://EVM/./src/utils/stringifyEvents.ts","webpack://EVM/./src/utils/stringifyFunctions.ts","webpack://EVM/./src/utils/stringifyInstructions.ts","webpack://EVM/./src/utils/stringifyMappings.ts","webpack://EVM/./src/utils/stringifyStructs.ts","webpack://EVM/./src/utils/stringifyVariables.ts"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtoDAAoD;AACpD;;AAEA;AACA;AACA;AACA,oDAAoD;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,qBAAqB,IAAI;AACvE;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA,oBAAoB,KAAK,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+GAA+G,wBAAwB;;AAEvI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAm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","file":"EVM.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    var pow;\r\n    if (supportsNativeBigInt) {\r\n        // forced to use eval because ** is a syntax error on pre-ECMAScript2017 environments.\r\n        pow = eval(\"(a,b)=>a**b\");\r\n    }\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        if (b === BigInt(0)) return Integer[1];\r\n        if (a === BigInt(0)) return Integer[0];\r\n        if (a === BigInt(1)) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(BigInt(0));\r\n        return new NativeBigInt(pow(a, b));\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2)));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(Math.random() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(Math.random() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define(\"big-integer\", [], function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","'use strict';\n\nvar codes = {\n  // 0x0 range - arithmetic ops\n  // name, baseCost, off stack, on stack, dynamic, async\n  0x00: ['STOP', 0, 0, 0, false],\n  0x01: ['ADD', 3, 2, 1, false],\n  0x02: ['MUL', 5, 2, 1, false],\n  0x03: ['SUB', 3, 2, 1, false],\n  0x04: ['DIV', 5, 2, 1, false],\n  0x05: ['SDIV', 5, 2, 1, false],\n  0x06: ['MOD', 5, 2, 1, false],\n  0x07: ['SMOD', 5, 2, 1, false],\n  0x08: ['ADDMOD', 8, 3, 1, false],\n  0x09: ['MULMOD', 8, 3, 1, false],\n  0x0a: ['EXP', 10, 2, 1, false],\n  0x0b: ['SIGNEXTEND', 5, 2, 1, false],\n\n  // 0x10 range - bit ops\n  0x10: ['LT', 3, 2, 1, false],\n  0x11: ['GT', 3, 2, 1, false],\n  0x12: ['SLT', 3, 2, 1, false],\n  0x13: ['SGT', 3, 2, 1, false],\n  0x14: ['EQ', 3, 2, 1, false],\n  0x15: ['ISZERO', 3, 1, 1, false],\n  0x16: ['AND', 3, 2, 1, false],\n  0x17: ['OR', 3, 2, 1, false],\n  0x18: ['XOR', 3, 2, 1, false],\n  0x19: ['NOT', 3, 1, 1, false],\n  0x1a: ['BYTE', 3, 2, 1, false],\n  0x1b: ['SHL', 3, 2, 1, false],\n  0x1c: ['SHR', 3, 2, 1, false],\n  0x1d: ['SAR', 3, 2, 1, false],\n\n  // 0x20 range - crypto\n  0x20: ['SHA3', 30, 2, 1, false],\n\n  // 0x30 range - closure state\n  0x30: ['ADDRESS', 2, 0, 1, true],\n  0x31: ['BALANCE', 400, 1, 1, true, true],\n  0x32: ['ORIGIN', 2, 0, 1, true],\n  0x33: ['CALLER', 2, 0, 1, true],\n  0x34: ['CALLVALUE', 2, 0, 1, true],\n  0x35: ['CALLDATALOAD', 3, 1, 1, true],\n  0x36: ['CALLDATASIZE', 2, 0, 1, true],\n  0x37: ['CALLDATACOPY', 3, 3, 0, true],\n  0x38: ['CODESIZE', 2, 0, 1, false],\n  0x39: ['CODECOPY', 3, 3, 0, false],\n  0x3a: ['GASPRICE', 2, 0, 1, false],\n  0x3b: ['EXTCODESIZE', 700, 1, 1, true, true],\n  0x3c: ['EXTCODECOPY', 700, 4, 0, true, true],\n  0x3d: ['RETURNDATASIZE', 2, 0, 1, true],\n  0x3e: ['RETURNDATACOPY', 3, 3, 0, true],\n  0x3f: ['EXTCODEHASH', 400, 1, 1, true, true],\n\n  // '0x40' range - block operations\n  0x40: ['BLOCKHASH', 20, 1, 1, true, true],\n  0x41: ['COINBASE', 2, 0, 1, true],\n  0x42: ['TIMESTAMP', 2, 0, 1, true],\n  0x43: ['NUMBER', 2, 0, 1, true],\n  0x44: ['DIFFICULTY', 2, 0, 1, true],\n  0x45: ['GASLIMIT', 2, 0, 1, true],\n\n  // 0x50 range - 'storage' and execution\n  0x50: ['POP', 2, 1, 0, false],\n  0x51: ['MLOAD', 3, 1, 1, false],\n  0x52: ['MSTORE', 3, 2, 0, false],\n  0x53: ['MSTORE8', 3, 2, 0, false],\n  0x54: ['SLOAD', 200, 1, 1, true, true],\n  0x55: ['SSTORE', 0, 2, 0, true, true],\n  0x56: ['JUMP', 8, 1, 0, false],\n  0x57: ['JUMPI', 10, 2, 0, false],\n  0x58: ['PC', 2, 0, 1, false],\n  0x59: ['MSIZE', 2, 0, 1, false],\n  0x5a: ['GAS', 2, 0, 1, false],\n  0x5b: ['JUMPDEST', 1, 0, 0, false],\n\n  // 0x60, range\n  0x60: ['PUSH', 3, 0, 1, false],\n  0x61: ['PUSH', 3, 0, 1, false],\n  0x62: ['PUSH', 3, 0, 1, false],\n  0x63: ['PUSH', 3, 0, 1, false],\n  0x64: ['PUSH', 3, 0, 1, false],\n  0x65: ['PUSH', 3, 0, 1, false],\n  0x66: ['PUSH', 3, 0, 1, false],\n  0x67: ['PUSH', 3, 0, 1, false],\n  0x68: ['PUSH', 3, 0, 1, false],\n  0x69: ['PUSH', 3, 0, 1, false],\n  0x6a: ['PUSH', 3, 0, 1, false],\n  0x6b: ['PUSH', 3, 0, 1, false],\n  0x6c: ['PUSH', 3, 0, 1, false],\n  0x6d: ['PUSH', 3, 0, 1, false],\n  0x6e: ['PUSH', 3, 0, 1, false],\n  0x6f: ['PUSH', 3, 0, 1, false],\n  0x70: ['PUSH', 3, 0, 1, false],\n  0x71: ['PUSH', 3, 0, 1, false],\n  0x72: ['PUSH', 3, 0, 1, false],\n  0x73: ['PUSH', 3, 0, 1, false],\n  0x74: ['PUSH', 3, 0, 1, false],\n  0x75: ['PUSH', 3, 0, 1, false],\n  0x76: ['PUSH', 3, 0, 1, false],\n  0x77: ['PUSH', 3, 0, 1, false],\n  0x78: ['PUSH', 3, 0, 1, false],\n  0x79: ['PUSH', 3, 0, 1, false],\n  0x7a: ['PUSH', 3, 0, 1, false],\n  0x7b: ['PUSH', 3, 0, 1, false],\n  0x7c: ['PUSH', 3, 0, 1, false],\n  0x7d: ['PUSH', 3, 0, 1, false],\n  0x7e: ['PUSH', 3, 0, 1, false],\n  0x7f: ['PUSH', 3, 0, 1, false],\n\n  0x80: ['DUP', 3, 0, 1, false],\n  0x81: ['DUP', 3, 0, 1, false],\n  0x82: ['DUP', 3, 0, 1, false],\n  0x83: ['DUP', 3, 0, 1, false],\n  0x84: ['DUP', 3, 0, 1, false],\n  0x85: ['DUP', 3, 0, 1, false],\n  0x86: ['DUP', 3, 0, 1, false],\n  0x87: ['DUP', 3, 0, 1, false],\n  0x88: ['DUP', 3, 0, 1, false],\n  0x89: ['DUP', 3, 0, 1, false],\n  0x8a: ['DUP', 3, 0, 1, false],\n  0x8b: ['DUP', 3, 0, 1, false],\n  0x8c: ['DUP', 3, 0, 1, false],\n  0x8d: ['DUP', 3, 0, 1, false],\n  0x8e: ['DUP', 3, 0, 1, false],\n  0x8f: ['DUP', 3, 0, 1, false],\n\n  0x90: ['SWAP', 3, 0, 0, false],\n  0x91: ['SWAP', 3, 0, 0, false],\n  0x92: ['SWAP', 3, 0, 0, false],\n  0x93: ['SWAP', 3, 0, 0, false],\n  0x94: ['SWAP', 3, 0, 0, false],\n  0x95: ['SWAP', 3, 0, 0, false],\n  0x96: ['SWAP', 3, 0, 0, false],\n  0x97: ['SWAP', 3, 0, 0, false],\n  0x98: ['SWAP', 3, 0, 0, false],\n  0x99: ['SWAP', 3, 0, 0, false],\n  0x9a: ['SWAP', 3, 0, 0, false],\n  0x9b: ['SWAP', 3, 0, 0, false],\n  0x9c: ['SWAP', 3, 0, 0, false],\n  0x9d: ['SWAP', 3, 0, 0, false],\n  0x9e: ['SWAP', 3, 0, 0, false],\n  0x9f: ['SWAP', 3, 0, 0, false],\n\n  0xa0: ['LOG', 375, 2, 0, false],\n  0xa1: ['LOG', 375, 3, 0, false],\n  0xa2: ['LOG', 375, 4, 0, false],\n  0xa3: ['LOG', 375, 5, 0, false],\n  0xa4: ['LOG', 375, 6, 0, false],\n\n  // '0xf0' range - closures\n  0xf0: ['CREATE', 32000, 3, 1, true, true],\n  0xf1: ['CALL', 700, 7, 1, true, true],\n  0xf2: ['CALLCODE', 700, 7, 1, true, true],\n  0xf3: ['RETURN', 0, 2, 0, false],\n  0xf4: ['DELEGATECALL', 700, 6, 1, true, true],\n  0xf5: ['CREATE2', 32000, 4, 1, true, true],\n  0xfa: ['STATICCALL', 700, 6, 1, true, true],\n  0xfd: ['REVERT', 0, 2, 0, false],\n\n  // '0x70', range - other\n  0xfe: ['INVALID', 0, 0, 0, false],\n  0xff: ['SELFDESTRUCT', 5000, 1, 0, false, true]\n};\n\nmodule.exports = function (op, full, freeLogs) {\n  var code = codes[op] ? codes[op] : ['INVALID', 0, 0, 0, false, false];\n  var opcode = code[0];\n\n  if (full) {\n    if (opcode === 'LOG') {\n      opcode += op - 0xa0;\n    }\n\n    if (opcode === 'PUSH') {\n      opcode += op - 0x5f;\n    }\n\n    if (opcode === 'DUP') {\n      opcode += op - 0x7f;\n    }\n\n    if (opcode === 'SWAP') {\n      opcode += op - 0x8f;\n    }\n  }\n\n  var fee = code[1];\n\n  if (freeLogs) {\n    if (opcode === 'LOG') {\n      fee = 0;\n    }\n  }\n\n  return { name: opcode, opcode: op, fee: fee, in: code[2], out: code[3], dynamic: code[4], async: code[5] };\n};","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","const findOpcode = require('../../node_modules/ethereumjs-vm/dist/opcodes.js');\r\nimport * as functionHashes from '../../data/functionHashes.json';\r\nimport * as eventHashes from '../../data/eventHashes.json';\r\nimport opcodeFunctions from '../utils/opcodes';\r\nimport stringifyEvents from '../utils/stringifyEvents';\r\nimport stringifyStructs from '../utils/stringifyStructs';\r\nimport stringifyMappings from '../utils/stringifyMappings';\r\nimport stringifyVariables from '../utils/stringifyVariables';\r\nimport stringifyFunctions from '../utils/stringifyFunctions';\r\nimport stringifyInstructions from '../utils/stringifyInstructions';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport Stack from './stack.class';\r\nimport Memory from '../interfaces/memory.interface';\r\nimport Storage from '../interfaces/storage.interface';\r\nimport Jumps from '../interfaces/jumps.interface';\r\n\r\nclass EVM {\r\n    pc: number;\r\n    stack: Stack;\r\n    memory: Memory;\r\n    opcodes: Opcode[];\r\n    instructions: any;\r\n    storage: Storage;\r\n    jumps: Jumps;\r\n    code: Buffer;\r\n    mappings: any;\r\n    layer: number;\r\n    halted: boolean;\r\n    functions: any;\r\n    variables: any;\r\n    events: any;\r\n    gasUsed: number;\r\n\r\n    constructor(code: string | Buffer) {\r\n        this.pc = 0;\r\n        this.opcodes = [];\r\n        this.instructions = [];\r\n        this.stack = new Stack();\r\n        this.memory = {};\r\n        this.storage = {};\r\n        this.jumps = {};\r\n        this.mappings = {};\r\n        this.layer = 0;\r\n        this.halted = false;\r\n        this.functions = {};\r\n        this.variables = {};\r\n        this.events = {};\r\n        this.gasUsed = 0;\r\n        if (code instanceof Buffer) {\r\n            this.code = code;\r\n        } else {\r\n            this.code = Buffer.from(code.replace('0x', ''), 'hex');\r\n        }\r\n    }\r\n\r\n    clone(): EVM {\r\n        const clone = new EVM(this.code);\r\n        clone.pc = this.pc;\r\n        clone.opcodes = this.opcodes;\r\n        clone.stack = this.stack.clone();\r\n        clone.memory = { ...this.memory };\r\n        clone.storage = this.storage;\r\n        clone.jumps = { ...this.jumps };\r\n        clone.mappings = this.mappings;\r\n        clone.layer = this.layer + 1;\r\n        clone.functions = this.functions;\r\n        clone.variables = this.variables;\r\n        clone.events = this.events;\r\n        clone.gasUsed = this.gasUsed;\r\n        return clone;\r\n    }\r\n\r\n    getBytecode(): string {\r\n        return '0x' + this.code.toString('hex');\r\n    }\r\n\r\n    getOpcodes(): Opcode[] {\r\n        if (this.opcodes.length === 0) {\r\n            for (let index = 0; index < this.code.length; index++) {\r\n                const currentOp = findOpcode(this.code[index], true);\r\n                currentOp.pc = index;\r\n                this.opcodes.push(currentOp);\r\n                if (currentOp.name.startsWith('PUSH')) {\r\n                    const pushDataLength = this.code[index] - 0x5f;\r\n                    const pushData = this.code.slice(index + 1, index + pushDataLength + 1);\r\n                    currentOp.pushData = pushData;\r\n                    index += pushDataLength;\r\n                }\r\n            }\r\n        }\r\n        return this.opcodes;\r\n    }\r\n\r\n    getFunctions(): string[] {\r\n        return [\r\n            ...new Set(\r\n                this.getOpcodes()\r\n                    .filter(opcode => opcode.name === 'PUSH4')\r\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\r\n                    .filter(hash => hash in functionHashes)\r\n                    .map(hash => (functionHashes as any)[hash])\r\n            )\r\n        ];\r\n    }\r\n\r\n    getEvents(): string[] {\r\n        return [\r\n            ...new Set(\r\n                this.getOpcodes()\r\n                    .filter(opcode => opcode.name === 'PUSH32')\r\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\r\n                    .filter(hash => hash in eventHashes)\r\n                    .map(hash => (eventHashes as any)[hash])\r\n            )\r\n        ];\r\n    }\r\n\r\n    getJumpDestinations(): number[] {\r\n        return this.getOpcodes()\r\n            .filter(opcode => opcode.name === 'JUMPDEST')\r\n            .map(opcode => opcode.pc);\r\n    }\r\n\r\n    getTotalGas(): number {\r\n        return this.getOpcodes()\r\n            .map(opcode => opcode.fee)\r\n            .reduce((a: number, b: number) => a + b);\r\n    }\r\n\r\n    getSwarmHash(): string | boolean {\r\n        const regex = /a165627a7a72305820([a-f0-9]{64})0029$/;\r\n        const bytecode = this.getBytecode();\r\n        const match = bytecode.match(regex);\r\n        if (match && match[1]) {\r\n            return 'bzzr://' + match[1];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        this.pc = 0;\r\n        this.instructions = [];\r\n        this.stack.reset();\r\n        this.memory = {};\r\n        this.storage = {};\r\n        this.jumps = {};\r\n        this.mappings = {};\r\n        this.functions = {};\r\n        this.variables = {};\r\n        this.events = {};\r\n        this.gasUsed = 0;\r\n    }\r\n\r\n    parse(): any[] {\r\n        if (this.instructions.length === 0) {\r\n            const opcodes = this.getOpcodes();\r\n            for (this.pc; this.pc < opcodes.length && !this.halted; this.pc++) {\r\n                const opcode = opcodes[this.pc];\r\n                this.gasUsed += opcode.fee;\r\n                if (!(opcode.name in opcodeFunctions)) {\r\n                    throw new Error('Unknown OPCODE: ' + opcode.name);\r\n                } else {\r\n                    (opcodeFunctions as any)[opcode.name](opcode, this);\r\n                }\r\n            }\r\n        }\r\n        return this.instructions;\r\n    }\r\n\r\n    decompile(): string {\r\n        const instructionTree = this.parse();\r\n        const events = stringifyEvents(this.events, this.getEvents());\r\n        const structs = stringifyStructs(this.mappings);\r\n        const mappings = stringifyMappings(this.mappings);\r\n        const variables = stringifyVariables(this.variables);\r\n        const functions = Object.keys(this.functions)\r\n            .map((functionName: string) =>\r\n                stringifyFunctions(functionName, this.functions[functionName])\r\n            )\r\n            .join('');\r\n        const code = stringifyInstructions(instructionTree);\r\n        return events + structs + mappings + variables + functions + code;\r\n    }\r\n}\r\n\r\nexport default EVM;\r\n","export default class Stack {\r\n    elements: any[];\r\n\r\n    constructor() {\r\n        this.elements = [];\r\n    }\r\n\r\n    push(item: any): void {\r\n        if (this.elements.length >= 1024) {\r\n            throw new Error('Stack too deep');\r\n        } else {\r\n            this.elements.unshift(item);\r\n        }\r\n    }\r\n\r\n    pop(): any {\r\n        if (this.elements.length === 0) {\r\n            throw new Error('POP with empty stack');\r\n        } else {\r\n            return this.elements.shift();\r\n        }\r\n    }\r\n\r\n    duplicate(position: number): void {\r\n        if (position < 0 || position > 15) {\r\n            throw new Error('Unsupported position for duplication operation');\r\n        } else if (!(position in this.elements)) {\r\n            throw new Error(\r\n                \"Invalid duplication operation, provided position wasn't found in stack\"\r\n            );\r\n        } else {\r\n            this.push(this.elements[position]);\r\n        }\r\n    }\r\n\r\n    swap(secondPosition: number): void {\r\n        if (secondPosition < 1 || secondPosition > 16) {\r\n            throw new Error('Unsupported position for swap operation');\r\n        } else if (!(secondPosition in this.elements)) {\r\n            throw new Error(\"Invalid swap operation, provided position wasn't found in stack\");\r\n        } else {\r\n            const firstValue = this.elements[0];\r\n            const secondValue = this.elements[secondPosition];\r\n            this.elements[0] = secondValue;\r\n            this.elements[secondPosition] = firstValue;\r\n        }\r\n    }\r\n\r\n    clone(): Stack {\r\n        const stack = new Stack();\r\n        stack.elements = [...this.elements];\r\n        return stack;\r\n    }\r\n\r\n    reset(): void {\r\n        this.elements = [];\r\n    }\r\n}\r\n","import * as BigNumber from '../../node_modules/big-integer';\r\nimport * as functionHashes from '../../data/functionHashes.json';\r\n\r\nconst parseSingle = (data: any, type: any) => {\r\n    if (type === 'string') {\r\n        return '\"' + Buffer.from(data, 'hex').toString('utf8') + '\"';\r\n    } else if (type === 'address') {\r\n        return '0x' + data.substring(24);\r\n    } else if (type === 'uint256' || type === 'uint8') {\r\n        return BigNumber(data, 16).toString();\r\n    } else if (type === 'bool') {\r\n        return (!BigNumber(data, 16).isZero()).toString();\r\n    } else {\r\n        return data;\r\n    }\r\n};\r\n\r\nexport default class Transaction {\r\n    blockHash?: string;\r\n    blockNumber?: number;\r\n    from?: string;\r\n    gas?: number;\r\n    gasPrice?: number;\r\n    input?: string;\r\n    to?: string;\r\n    value?: number;\r\n\r\n    constructor(transactionObject?: any) {\r\n        if (transactionObject) {\r\n            if ('blockHash' in transactionObject) {\r\n                this.blockHash = transactionObject.blockHash;\r\n            }\r\n            if ('blockNumber' in transactionObject) {\r\n                this.blockNumber = transactionObject.blockNumber;\r\n            }\r\n            if ('from' in transactionObject) {\r\n                this.from = transactionObject.from;\r\n            }\r\n            if ('gas' in transactionObject) {\r\n                this.gas = transactionObject.gas;\r\n            }\r\n            if ('gasPrice' in transactionObject) {\r\n                this.gasPrice = transactionObject.gasPrice;\r\n            }\r\n            if ('input' in transactionObject) {\r\n                this.input = transactionObject.input.replace('0x', '');\r\n            }\r\n            if ('to' in transactionObject) {\r\n                this.to = transactionObject.to;\r\n            }\r\n            if ('value' in transactionObject) {\r\n                this.value = transactionObject.value;\r\n            }\r\n        }\r\n    }\r\n\r\n    setInput(input: string): void {\r\n        this.input = input.replace('0x', '');\r\n    }\r\n\r\n    getFunctionHash(): string | false {\r\n        if (this.input && this.input.length >= 8) {\r\n            return this.input.substr(0, 8);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getFunction(): string | false {\r\n        const functionHash = this.getFunctionHash();\r\n        if (functionHash && functionHash in functionHashes) {\r\n            return (functionHashes as any)[functionHash];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getFunctionName(): string | false {\r\n        const rawFunction = this.getFunction();\r\n        if (rawFunction) {\r\n            return rawFunction.split('(')[0];\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getRawArguments(): string[] {\r\n        if (this.input && this.input.length >= 70) {\r\n            return this.input.substr(8).match(/.{1,64}/g)!;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    getArguments(descriptive: boolean = true): string[] {\r\n        const functionName = this.getFunction();\r\n        const functionArguments = this.getRawArguments();\r\n        if (functionName && this.input) {\r\n            const rawFunctionArguments = functionName\r\n                .split('(')[1]\r\n                .slice(0, -1)\r\n                .split(',');\r\n            if (\r\n                rawFunctionArguments.length === 1 &&\r\n                rawFunctionArguments[0] === '' &&\r\n                functionArguments.length === 0\r\n            ) {\r\n                return [];\r\n            } else {\r\n                const result: string[] = [];\r\n                for (let i = 0; i < rawFunctionArguments.length; i++) {\r\n                    const functionArgumentType = rawFunctionArguments[i] || 'unknown';\r\n                    const functionArgument = functionArguments[i];\r\n                    if (functionArgumentType === 'string') {\r\n                        const location = BigNumber(functionArgument, 16)\r\n                            .divide(32)\r\n                            .toJSNumber();\r\n                        const length = BigNumber(functionArguments[location], 16)\r\n                            .multiply(2)\r\n                            .toJSNumber();\r\n                        const data = this.input.substring(8).substr((location + 1) * 64, length);\r\n                        result.push(parseSingle(data, functionArgumentType));\r\n                    } else {\r\n                        result.push(parseSingle(functionArgument, functionArgumentType));\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n        } else {\r\n            return functionArguments;\r\n        }\r\n    }\r\n\r\n    isContractCreation(): boolean {\r\n        return this.to === null;\r\n    }\r\n}\r\n","import * as _functions from '../data/functions.json';\r\nimport * as _events from '../data/events.json';\r\nimport * as _functionHashes from '../data/functionHashes.json';\r\nimport * as _eventHashes from '../data/eventHashes.json';\r\nimport Transaction from './classes/tx.class';\r\nimport EVM from './classes/evm.class';\r\n\r\nexport const functions: any = _functions as any;\r\nexport const events: any = _events as any;\r\nexport const functionHashes: any = _functionHashes as any;\r\nexport const eventHashes: any = _eventHashes as any;\r\n\r\nexport { EVM, Transaction };\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class ADD {\r\n    readonly name: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'ADD';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' + ' + stringify(this.right);\r\n    }\r\n\r\n    get type() {\r\n        if (this.left.type === this.right.type) {\r\n            return this.left.type;\r\n        } else if (!this.left.type && this.right.type) {\r\n            return this.right.type;\r\n        } else if (!this.right.type && this.left.type) {\r\n            return this.left.type;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.add(right));\r\n    } else if (BigNumber.isInstance(left) && left.isZero()) {\r\n        state.stack.push(right);\r\n    } else if (BigNumber.isInstance(right) && right.isZero()) {\r\n        state.stack.push(left);\r\n    } else {\r\n        state.stack.push(new ADD(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { ADD } from './add';\r\nimport { MOD } from './mod';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    const mod = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right) && BigNumber.isInstance(mod)) {\r\n        state.stack.push(left.add(right).mod(mod));\r\n    } else if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(new MOD(left.add(right), mod));\r\n    } else {\r\n        state.stack.push(new MOD(new ADD(left, right), mod));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class ADDRESS {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'ADDRESS';\r\n        this.type = 'address';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'this';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new ADDRESS());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class AND {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'AND';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' && ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.and(right));\r\n    } else if (BigNumber.isInstance(left) && /^[f]+$/.test(left.toString(16))) {\r\n        right.size = left.toString(16).length;\r\n        state.stack.push(right);\r\n    } else if (BigNumber.isInstance(right) && /^[f]+$/.test(right.toString(16))) {\r\n        left.size = right.toString(16).length;\r\n        state.stack.push(left);\r\n        /*} else if (\r\n        BigNumber.isInstance(left) &&\r\n        left.equals('1461501637330902918203684832716283019655932542975')\r\n    ) {*/\r\n        /* 2 ** 160 */\r\n        /*    state.stack.push(right);\r\n    } else if (\r\n        BigNumber.isInstance(right) &&\r\n        right.equals('1461501637330902918203684832716283019655932542975')\r\n    ) {*/\r\n        /* 2 ** 160 */\r\n        /*    state.stack.push(left);*/\r\n    } else if (\r\n        BigNumber.isInstance(left) &&\r\n        right instanceof AND &&\r\n        BigNumber.isInstance(right.left) &&\r\n        left.equals(right.left)\r\n    ) {\r\n        state.stack.push(right.right);\r\n    } else {\r\n        state.stack.push(new AND(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class BALANCE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n\r\n    constructor(address: any) {\r\n        this.name = 'BALANCE';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.address) + '.balance';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    state.stack.push(new BALANCE(address));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class BLOCKHASH {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly number: any;\r\n\r\n    constructor(blockNumber: any) {\r\n        this.name = 'BLOCKHASH';\r\n        this.wrapped = true;\r\n        this.number = blockNumber;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.blockhash(' + stringify(this.number) + ')';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const blockNumber = state.stack.pop();\r\n    state.stack.push(new BLOCKHASH(blockNumber));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class BYTE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly position: any;\r\n    readonly data: any;\r\n\r\n    constructor(position: any, data: any) {\r\n        this.name = 'BYTE';\r\n        this.wrapped = true;\r\n        this.position = position;\r\n        this.data = data;\r\n    }\r\n\r\n    toString() {\r\n        return '(' + stringify(this.data) + ' >> ' + stringify(this.position) + ') & 1';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const position = state.stack.pop();\r\n    const data = state.stack.pop();\r\n    if (BigNumber.isInstance(data) && BigNumber.isInstance(position)) {\r\n        state.stack.push(data.shiftRight(position).and(1));\r\n    } else {\r\n        state.stack.push(new BYTE(position, data));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CALL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly gas: any;\r\n    readonly address: any;\r\n    readonly value: any;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly outputStart: any;\r\n    readonly outputLength: any;\r\n\r\n    constructor(\r\n        gas: any,\r\n        address: any,\r\n        value: any,\r\n        memoryStart: any,\r\n        memoryLength: any,\r\n        outputStart: any,\r\n        outputLength: any\r\n    ) {\r\n        this.name = 'CALL';\r\n        this.wrapped = true;\r\n        this.gas = gas;\r\n        this.address = address;\r\n        this.value = value;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.outputStart = outputStart;\r\n        this.outputLength = outputLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'call(' +\r\n            stringify(this.gas) +\r\n            ',' +\r\n            stringify(this.address) +\r\n            ',' +\r\n            stringify(this.value) +\r\n            ',' +\r\n            stringify(this.memoryStart) +\r\n            ',' +\r\n            stringify(this.memoryLength) +\r\n            ',' +\r\n            stringify(this.outputStart) +\r\n            ',' +\r\n            stringify(this.outputLength) +\r\n            ')'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const gas = state.stack.pop();\r\n    const address = state.stack.pop();\r\n    const value = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const outputStart = state.stack.pop();\r\n    const outputLength = state.stack.pop();\r\n    state.stack.push(\r\n        new CALL(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\r\n    );\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CALLCODE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly gas: any;\r\n    readonly address: any;\r\n    readonly value: any;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly outputStart: any;\r\n    readonly outputLength: any;\r\n\r\n    constructor(\r\n        gas: any,\r\n        address: any,\r\n        value: any,\r\n        memoryStart: any,\r\n        memoryLength: any,\r\n        outputStart: any,\r\n        outputLength: any\r\n    ) {\r\n        this.name = 'CALLCODE';\r\n        this.wrapped = true;\r\n        this.gas = gas;\r\n        this.address = address;\r\n        this.value = value;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.outputStart = outputStart;\r\n        this.outputLength = outputLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'callcode(' +\r\n            stringify(this.gas) +\r\n            ',' +\r\n            stringify(this.address) +\r\n            ',' +\r\n            stringify(this.value) +\r\n            ',' +\r\n            stringify(this.memoryStart) +\r\n            ',' +\r\n            stringify(this.memoryLength) +\r\n            ',' +\r\n            stringify(this.outputStart) +\r\n            ',' +\r\n            stringify(this.outputLength) +\r\n            ')'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const gas = state.stack.pop();\r\n    const address = state.stack.pop();\r\n    const value = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const outputStart = state.stack.pop();\r\n    const outputLength = state.stack.pop();\r\n    state.stack.push(\r\n        new CALLCODE(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\r\n    );\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CALLDATACOPY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly startLocation: any;\r\n    readonly copyLength: any;\r\n\r\n    constructor(startLocation: any, copyLength: any) {\r\n        this.name = 'CALLDATACOPY';\r\n        this.wrapped = true;\r\n        this.startLocation = startLocation;\r\n        this.copyLength = copyLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'msg.data[' +\r\n            this.startLocation +\r\n            ':(' +\r\n            this.startLocation +\r\n            '+' +\r\n            this.copyLength +\r\n            ')];'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryLocation = state.stack.pop();\r\n    const startLocation = state.stack.pop();\r\n    const copyLength = state.stack.pop();\r\n    state.memory[memoryLocation] = new CALLDATACOPY(startLocation, copyLength);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CALLDATALOAD {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly returntype?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n\r\n    constructor(location: any) {\r\n        this.name = 'CALLDATALOAD';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n    }\r\n\r\n    toString() {\r\n        if (BigNumber.isInstance(this.location) && this.location.isZero()) {\r\n            return 'msg.data';\r\n        } else if (\r\n            BigNumber.isInstance(this.location) &&\r\n            this.location\r\n                .subtract(4)\r\n                .mod(32)\r\n                .isZero()\r\n        ) {\r\n            return (\r\n                '_arg' +\r\n                this.location\r\n                    .subtract(4)\r\n                    .divide(32)\r\n                    .toString()\r\n            );\r\n        } else {\r\n            return 'msg.data[' + stringify(this.location) + ']';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const startLocation = state.stack.pop();\r\n    state.stack.push(new CALLDATALOAD(startLocation));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CALLDATASIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'CALLDATASIZE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'msg.data.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new CALLDATASIZE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CALLER {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'CALLER';\r\n        this.name = 'address';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'msg.sender';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new CALLER());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CALLVALUE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'CALLVALUE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'msg.value';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new CALLVALUE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CODECOPY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly startLocation: any;\r\n    readonly copyLength: any;\r\n\r\n    constructor(startLocation: any, copyLength: any) {\r\n        this.name = 'CODECOPY';\r\n        this.wrapped = true;\r\n        this.startLocation = startLocation;\r\n        this.copyLength = copyLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'this.code[' +\r\n            stringify(this.startLocation) +\r\n            ':(' +\r\n            stringify(this.startLocation) +\r\n            '+' +\r\n            stringify(this.copyLength) +\r\n            ')]'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryLocation = state.stack.pop();\r\n    const startLocation = state.stack.pop();\r\n    const copyLength = state.stack.pop();\r\n    state.memory[memoryLocation] = new CODECOPY(startLocation, copyLength);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class CODESIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'CODESIZE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'this.code.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new CODESIZE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class COINBASE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'COINBASE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.coinbase';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new COINBASE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CREATE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly value: any;\r\n\r\n    constructor(memoryStart: any, memoryLength: any, value: any) {\r\n        this.name = 'CREATE';\r\n        this.name = 'address';\r\n        this.wrapped = true;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.value = value;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            '(new Contract(memory[' +\r\n            stringify(this.memoryStart) +\r\n            ':(' +\r\n            stringify(this.memoryStart) +\r\n            '+' +\r\n            stringify(this.memoryLength) +\r\n            ')]).value(' +\r\n            stringify(this.value) +\r\n            ')).address'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const value = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    state.stack.push(new CREATE(memoryStart, memoryLength, value));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class CREATE2 {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly value: any;\r\n\r\n    constructor(memoryStart: any, memoryLength: any, value: any) {\r\n        this.name = 'CREATE2';\r\n        this.wrapped = true;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.value = value;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            '(new Contract(memory[' +\r\n            stringify(this.memoryStart) +\r\n            ':(' +\r\n            stringify(this.memoryStart) +\r\n            '+' +\r\n            stringify(this.memoryLength) +\r\n            ')]).value(' +\r\n            stringify(this.value) +\r\n            ')).address'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const value = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    state.stack.push(new CREATE2(memoryStart, memoryLength, value));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class DELEGATECALL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly gas: any;\r\n    readonly address: any;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly outputStart: any;\r\n    readonly outputLength: any;\r\n\r\n    constructor(\r\n        gas: any,\r\n        address: any,\r\n        memoryStart: any,\r\n        memoryLength: any,\r\n        outputStart: any,\r\n        outputLength: any\r\n    ) {\r\n        this.name = 'DELEGATECALL';\r\n        this.wrapped = true;\r\n        this.gas = gas;\r\n        this.address = address;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.outputStart = outputStart;\r\n        this.outputLength = outputLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'delegatecall(' +\r\n            stringify(this.gas) +\r\n            ',' +\r\n            stringify(this.address) +\r\n            ',' +\r\n            stringify(this.memoryStart) +\r\n            ',' +\r\n            stringify(this.memoryLength) +\r\n            ',' +\r\n            stringify(this.outputStart) +\r\n            ',' +\r\n            stringify(this.outputLength) +\r\n            ')'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const gas = state.stack.pop();\r\n    const address = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const outputStart = state.stack.pop();\r\n    const outputLength = state.stack.pop();\r\n    state.stack.push(\r\n        new DELEGATECALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\r\n    );\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class DIFFICULTY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'DIFFICULTY';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.difficulty';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new DIFFICULTY());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class DIV {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'DIV';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' / ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.divide(right));\r\n    } else if (BigNumber.isInstance(right) && right.equals(1)) {\r\n        state.stack.push(left);\r\n    } else {\r\n        state.stack.push(new DIV(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const duplicateLocation = parseInt(opcode.name.replace('DUP', ''), 10) - 1;\r\n    state.stack.duplicate(duplicateLocation);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SIG {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly hash: string;\r\n\r\n    constructor(hash: string) {\r\n        this.name = 'SIG';\r\n        this.wrapped = false;\r\n        this.hash = hash;\r\n    }\r\n\r\n    toString() {\r\n        return 'msg.sig == ' + this.hash;\r\n    }\r\n}\r\n\r\nexport class EQ {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'EQ';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' == ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    let left = state.stack.pop();\r\n    let right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(BigNumber(left.equals(right) === true ? 1 : 0));\r\n    } else {\r\n        if (\r\n            BigNumber.isInstance(left) &&\r\n            right.name === 'DIV' &&\r\n            BigNumber.isInstance(right.right)\r\n        ) {\r\n            left = left.multiply(right.right);\r\n            right = right.left;\r\n        }\r\n        if (\r\n            BigNumber.isInstance(right) &&\r\n            left.name === 'DIV' &&\r\n            BigNumber.isInstance(left.right)\r\n        ) {\r\n            right = right.multiply(left.right);\r\n            left = left.left;\r\n        }\r\n        if (\r\n            BigNumber.isInstance(left) &&\r\n            /^[0]+$/.test(left.toString(16).substring(8)) &&\r\n            right.name === 'CALLDATALOAD' &&\r\n            right.location.equals(0)\r\n        ) {\r\n            state.stack.push(\r\n                new SIG(\r\n                    '0'.repeat(64 - left.toString(16).length) +\r\n                        left.toString(16).substring(0, 8 - (64 - left.toString(16).length))\r\n                )\r\n            );\r\n        } else if (\r\n            BigNumber.isInstance(right) &&\r\n            /^[0]+$/.test(right.toString(16).substring(8)) &&\r\n            left.name === 'CALLDATALOAD' &&\r\n            left.location.equals(0)\r\n        ) {\r\n            state.stack.push(\r\n                new SIG(\r\n                    '0'.repeat(64 - right.toString(16).length) +\r\n                        right.toString(16).substring(0, 8 - (64 - right.toString(16).length))\r\n                )\r\n            );\r\n        } else {\r\n            state.stack.push(new EQ(left, right));\r\n        }\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class EXP {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'EXP';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' ** ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.pow(right));\r\n    } else {\r\n        state.stack.push(new EXP(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class EXTCODECOPY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n    readonly startLocation: any;\r\n    readonly copyLength: any;\r\n\r\n    constructor(address: any, startLocation: any, copyLength: any) {\r\n        this.name = 'EXTCODECOPY';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n        this.startLocation = startLocation;\r\n        this.copyLength = copyLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'address(' +\r\n            stringify(this.address) +\r\n            ').code[' +\r\n            stringify(this.startLocation) +\r\n            ':(' +\r\n            stringify(this.startLocation) +\r\n            '+' +\r\n            stringify(this.copyLength) +\r\n            ')]'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    const memoryLocation = state.stack.pop();\r\n    const startLocation = state.stack.pop();\r\n    const copyLength = state.stack.pop();\r\n    state.memory[memoryLocation] = new EXTCODECOPY(address, startLocation, copyLength);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class EXTCODEHASH {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n\r\n    constructor(address: any) {\r\n        this.name = 'EXTCODEHASH';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return 'keccak256(address(' + stringify(this.address) + ').code)';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    state.stack.push(new EXTCODEHASH(address));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class EXTCODESIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n\r\n    constructor(address: any) {\r\n        this.name = 'EXTCODESIZE';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return 'address(' + stringify(this.address) + ').code.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    state.stack.push(new EXTCODESIZE(address));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class GAS {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'GAS';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'gasleft()';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new GAS());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class GASLIMIT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'GASLIMIT';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.gaslimit';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new GASLIMIT());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class GASPRICE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'GASPRICE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'tx.gasprice';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new GASPRICE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class GT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n    readonly equal: boolean;\r\n\r\n    constructor(left: any, right: any, equal: boolean = false) {\r\n        this.name = 'GT';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.equal = equal;\r\n    }\r\n\r\n    toString() {\r\n        if (this.equal) {\r\n            return stringify(this.left) + ' >= ' + stringify(this.right);\r\n        } else {\r\n            return stringify(this.left) + ' > ' + stringify(this.right);\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(BigNumber(left.greater(right) === true ? 1 : 0));\r\n    } else {\r\n        state.stack.push(new GT(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class INVALID {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly opcode: any;\r\n\r\n    constructor(opcode: any) {\r\n        this.name = 'INVALID';\r\n        this.wrapped = true;\r\n        this.opcode = opcode;\r\n    }\r\n\r\n    toString() {\r\n        return 'revert(\"Invalid instruction (0x' + this.opcode.toString(16) + ')\");';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.halted = true;\r\n    state.instructions.push(new INVALID(opcode.opcode));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport { LT } from './lt';\r\nimport { GT } from './gt';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class ISZERO {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly item: any;\r\n\r\n    constructor(item: any) {\r\n        this.name = 'ISZERO';\r\n        this.wrapped = true;\r\n        this.item = item;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.item) + ' == 0';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const item = state.stack.pop();\r\n    if (BigNumber.isInstance(item)) {\r\n        state.stack.push(BigNumber(item.isZero() === true ? 1 : 0));\r\n    } else if (item.name === 'LT') {\r\n        if (item.equal) {\r\n            state.stack.push(new GT(item.left, item.right));\r\n        } else {\r\n            state.stack.push(new GT(item.left, item.right, true));\r\n        }\r\n    } else if (item.name === 'GT') {\r\n        if (item.equal) {\r\n            state.stack.push(new LT(item.left, item.right));\r\n        } else {\r\n            state.stack.push(new LT(item.left, item.right, true));\r\n        }\r\n    } else if (item instanceof ISZERO) {\r\n        state.stack.push(item.item);\r\n    } else {\r\n        state.stack.push(new ISZERO(item));\r\n    }\r\n    /* == -> != */\r\n    /* != -> == */\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class JUMP {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly valid: boolean;\r\n    readonly location: any;\r\n\r\n    constructor(location: any, bad?: boolean) {\r\n        this.name = 'JUMP';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n        this.valid = true;\r\n        if (bad) {\r\n            this.valid = false;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (!this.valid) {\r\n            return \"revert(\\\"Bad jump destination\\\");\";\r\n        } else {\r\n            return 'goto(' + stringify(this.location) + ');';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const jumpLocation = state.stack.pop();\r\n    if (!BigNumber.isInstance(jumpLocation)) {\r\n        state.halted = true;\r\n        state.instructions.push(new JUMP(jumpLocation, true));\r\n    } else {\r\n        const opcodes = state.getOpcodes();\r\n        const jumpLocationData = opcodes.find((o: any) => o.pc === jumpLocation.toJSNumber());\r\n        if (!jumpLocationData) {\r\n            state.halted = true;\r\n            state.instructions.push(new JUMP(jumpLocation, true));\r\n        } else {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            if (!(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)) {\r\n                if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\r\n                    state.halted = true;\r\n                    state.instructions.push(new JUMP(jumpLocation, true));\r\n                } else if (\r\n                    jumpLocationData &&\r\n                    jumpIndex >= 0 &&\r\n                    jumpLocationData.name === 'JUMPDEST'\r\n                ) {\r\n                    state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\r\n                    state.pc = jumpIndex;\r\n                } else {\r\n                    state.halted = true;\r\n                    state.instructions.push(new JUMP(jumpLocation, true));\r\n                }\r\n            } else {\r\n                state.halted = true;\r\n                state.instructions.push(new JUMP(jumpLocation));\r\n            }\r\n        }\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    /* Empty */\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport * as functionHashes from '../../data/functionHashes.json';\r\nimport stringify from '../utils/stringify';\r\n\r\nconst updateCallDataLoad = (item: any, types: any) => {\r\n    for (const i in item) {\r\n        if (item.hasOwnProperty(i)) {\r\n            if (\r\n                typeof item[i] === 'object' &&\r\n                item[i].name === 'CALLDATALOAD' &&\r\n                BigNumber.isInstance(item[i].location)\r\n            ) {\r\n                const argNumber = item[i].location\r\n                    .subtract(4)\r\n                    .divide(32)\r\n                    .toString();\r\n                item[i].type = types[argNumber];\r\n            }\r\n            if (typeof item[i] === 'object') {\r\n                updateCallDataLoad(item[i], types);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst findReturns = (item: any) => {\r\n    const returns = [];\r\n    for (const i in item) {\r\n        if (item.hasOwnProperty(i)) {\r\n            if (\r\n                typeof item[i] === 'object' &&\r\n                item[i].name === 'RETURN' &&\r\n                item[i].items &&\r\n                item[i].items.length > 0\r\n            ) {\r\n                returns.push(item[i].items);\r\n            }\r\n            if (typeof item[i] === 'object') {\r\n                const deepReturns: any = findReturns(item[i]);\r\n                if (deepReturns.length > 0) {\r\n                    returns.push(...deepReturns);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return returns;\r\n};\r\n\r\nexport class TopLevelFunction {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly hash: any;\r\n    readonly gasUsed: number;\r\n    readonly payable: boolean;\r\n    readonly visibility: string;\r\n    readonly constant: boolean;\r\n    readonly items: any;\r\n    readonly returns: any;\r\n\r\n    constructor(items: any, hash: any, gasUsed: number) {\r\n        this.name = 'Function';\r\n        this.hash = hash;\r\n        this.gasUsed = gasUsed;\r\n        this.items = items;\r\n        this.payable = true;\r\n        this.visibility = 'public';\r\n        this.constant = false;\r\n        this.returns = [];\r\n        if (\r\n            this.items.length > 0 &&\r\n            this.items[0] instanceof REQUIRE &&\r\n            this.items[0].condition.name === 'ISZERO' &&\r\n            this.items[0].condition.item.name === 'CALLVALUE'\r\n        ) {\r\n            this.payable = false;\r\n            this.items.shift();\r\n        }\r\n        if (this.items.length === 1 && this.items[0].name === 'RETURN') {\r\n            this.constant = true;\r\n        }\r\n        if (this.hash in functionHashes) {\r\n            const functionName = (functionHashes as any)[this.hash].split('(')[0];\r\n            const argumentTypes = (functionHashes as any)[this.hash]\r\n                .replace(functionName, '')\r\n                .substr(1)\r\n                .slice(0, -1)\r\n                .split(',');\r\n            if (\r\n                argumentTypes.length > 1 ||\r\n                (argumentTypes.length === 1 && argumentTypes[0] !== '')\r\n            ) {\r\n                this.items.forEach((item: any) => updateCallDataLoad(item, argumentTypes));\r\n            }\r\n        }\r\n        const returns: any = [];\r\n        this.items.forEach((item: any) => {\r\n            const deepReturns = findReturns(item);\r\n            if (deepReturns.length > 0) {\r\n                returns.push(...deepReturns);\r\n            }\r\n        });\r\n        if (\r\n            returns.length > 0 &&\r\n            returns.every(\r\n                (returnItem: any) =>\r\n                    returnItem.length === returns[0].length &&\r\n                    returnItem.map((item: any) => item.type).join('') ===\r\n                        returns[0].map((item: any) => item.type).join('')\r\n            )\r\n        ) {\r\n            returns[0].forEach((item: any) => {\r\n                if (BigNumber.isInstance(item)) {\r\n                    this.returns.push('uint256');\r\n                } else if (item.type) {\r\n                    this.returns.push(item.type);\r\n                } else {\r\n                    this.returns.push('unknown');\r\n                }\r\n            });\r\n        } else if (returns.length > 0) {\r\n            this.returns.push('<unknown>');\r\n        }\r\n    }\r\n}\r\n\r\nexport class Variable {\r\n    readonly name: string;\r\n    readonly label: string | false;\r\n    readonly types: any;\r\n\r\n    constructor(label: string | false, types: any) {\r\n        this.name = 'Variable';\r\n        this.label = label;\r\n        this.types = types;\r\n    }\r\n}\r\n\r\nexport class REQUIRE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly condition: any;\r\n\r\n    constructor(condition: any) {\r\n        this.name = 'REQUIRE';\r\n        this.wrapped = true;\r\n        this.condition = condition;\r\n    }\r\n\r\n    toString() {\r\n        return 'require(' + stringify(this.condition) + ');';\r\n    }\r\n}\r\n\r\nexport class JUMPI {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly condition: any;\r\n    readonly location: any;\r\n    readonly valid: boolean;\r\n    readonly true?: any;\r\n    readonly false?: any;\r\n    readonly payable?: boolean;\r\n\r\n    constructor(condition: any, location: any, ifTrue?: any, ifFalse?: any, skipped?: boolean) {\r\n        this.name = 'JUMPI';\r\n        this.wrapped = true;\r\n        this.condition = condition;\r\n        this.location = location;\r\n        if (skipped) {\r\n            this.valid = true;\r\n        } else if (ifTrue && ifFalse) {\r\n            this.valid = true;\r\n            this.true = ifTrue;\r\n            this.false = ifFalse;\r\n            if (\r\n                this.true.length >= 1 &&\r\n                this.true[0] instanceof REQUIRE &&\r\n                this.true[0].condition.name === 'ISZERO' &&\r\n                this.true[0].condition.item.name === 'CALLVALUE'\r\n            ) {\r\n                this.payable = false;\r\n                this.true.shift();\r\n            } else {\r\n                this.payable = true;\r\n            }\r\n        } else {\r\n            this.valid = false;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.valid && this.true && this.false) {\r\n            return stringify(this.condition);\r\n        } else if (this.valid) {\r\n            return 'if' + stringify(this.condition) + ' goto(' + stringify(this.location) + ');';\r\n        } else {\r\n            return \"revert(\\\"Bad jump destination\\\");\";\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const jumpLocation = state.stack.pop();\r\n    const jumpCondition = state.stack.pop();\r\n    const opcodes = state.getOpcodes();\r\n    if (!BigNumber.isInstance(jumpLocation)) {\r\n        state.halted = true;\r\n        state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\r\n    } else {\r\n        const jumpLocationData = opcodes.find((o: any) => o.pc === jumpLocation.toJSNumber());\r\n        if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\r\n            state.halted = true;\r\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\r\n        } else if (BigNumber.isInstance(jumpCondition)) {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            if (\r\n                jumpIndex >= 0 &&\r\n                !jumpCondition.equals(0) &&\r\n                !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)\r\n            ) {\r\n                state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\r\n                state.pc = jumpIndex;\r\n            }\r\n        } else if (\r\n            !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps) &&\r\n            jumpCondition.name === 'SIG'\r\n        ) {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            if (jumpIndex >= 0) {\r\n                const functionClone: any = state.clone();\r\n                functionClone.pc = jumpIndex;\r\n                const functionCloneTree = functionClone.parse();\r\n                state.functions[jumpCondition.hash] = new TopLevelFunction(\r\n                    functionCloneTree,\r\n                    jumpCondition.hash,\r\n                    functionClone.gasUsed\r\n                );\r\n                if (\r\n                    jumpCondition.hash in functionHashes &&\r\n                    functionCloneTree.length === 1 &&\r\n                    functionCloneTree[0].name === 'RETURN' &&\r\n                    functionCloneTree[0].items.every((item: any) => item.name === 'MappingLoad')\r\n                ) {\r\n                    functionCloneTree[0].items.forEach((item: any) => {\r\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\r\n                        state.mappings[item.location].name = fullFunction.split('(')[0];\r\n                        if (\r\n                            item.structlocation &&\r\n                            !state.mappings[item.location].structs.includes(item.structlocation)\r\n                        ) {\r\n                            state.mappings[item.location].structs.push(item.structlocation);\r\n                        }\r\n                    });\r\n                    delete state.functions[jumpCondition.hash];\r\n                } else if (\r\n                    jumpCondition.hash in functionHashes &&\r\n                    state.functions[jumpCondition.hash].items.length === 1 &&\r\n                    state.functions[jumpCondition.hash].items[0].name === 'RETURN' &&\r\n                    state.functions[jumpCondition.hash].items[0].items.length === 1 &&\r\n                    state.functions[jumpCondition.hash].items[0].items[0].name === 'SLOAD' &&\r\n                    BigNumber.isInstance(\r\n                        state.functions[jumpCondition.hash].items[0].items[0].location\r\n                    )\r\n                ) {\r\n                    if (\r\n                        !(\r\n                            state.functions[jumpCondition.hash].items[0].items[0].location in\r\n                            state.variables\r\n                        )\r\n                    ) {\r\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\r\n                        state.variables[\r\n                            state.functions[jumpCondition.hash].items[0].items[0].location\r\n                        ] = new Variable(fullFunction.split('(')[0], []);\r\n                        delete state.functions[jumpCondition.hash];\r\n                    } else {\r\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\r\n                        state.variables[\r\n                            state.functions[jumpCondition.hash].items[0].items[0].location\r\n                        ].label = fullFunction.split('(')[0];\r\n                        delete state.functions[jumpCondition.hash];\r\n                    }\r\n                }\r\n            }\r\n        } else if (\r\n            !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps) &&\r\n            ((jumpCondition.name === 'LT' &&\r\n                jumpCondition.left.name === 'CALLDATASIZE' &&\r\n                BigNumber.isInstance(jumpCondition.right) &&\r\n                jumpCondition.right.equals(4)) ||\r\n                (jumpCondition.name === 'ISZERO' && jumpCondition.item.name === 'CALLDATASIZE'))\r\n        ) {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            if (jumpIndex >= 0) {\r\n                state.halted = true;\r\n                const trueClone: any = state.clone();\r\n                trueClone.pc = jumpIndex;\r\n                const trueCloneTree = trueClone.parse();\r\n                const falseClone = state.clone();\r\n                falseClone.pc = state.pc + 1;\r\n                const falseCloneTree: any = falseClone.parse();\r\n                if (\r\n                    trueCloneTree.length > 0 &&\r\n                    trueCloneTree.length === falseCloneTree.length &&\r\n                    trueCloneTree[0].name !== 'REVERT' &&\r\n                    trueCloneTree[0].name !== 'INVALID' &&\r\n                    trueCloneTree.map((item: any) => stringify(item)).join('') ===\r\n                        falseCloneTree.map((item: any) => stringify(item)).join('')\r\n                ) {\r\n                    state.functions[''] = new TopLevelFunction(\r\n                        trueCloneTree,\r\n                        '',\r\n                        trueCloneTree.gasUsed\r\n                    );\r\n                } else if (\r\n                    trueCloneTree.length > 0 &&\r\n                    trueCloneTree[0].name !== 'REVERT' &&\r\n                    trueCloneTree[0].name !== 'INVALID'\r\n                ) {\r\n                    state.instructions.push(\r\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\r\n                    );\r\n                }\r\n            } else {\r\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\r\n            }\r\n        } else if (!(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)) {\r\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\r\n            state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\r\n            if (jumpIndex >= 0) {\r\n                state.halted = true;\r\n                const trueClone: any = state.clone();\r\n                trueClone.pc = jumpIndex;\r\n                const trueCloneTree = trueClone.parse();\r\n                const falseClone = state.clone();\r\n                falseClone.pc = state.pc + 1;\r\n                const falseCloneTree: any = falseClone.parse();\r\n                if (\r\n                    (falseCloneTree.length === 1 &&\r\n                        'name' in falseCloneTree[0] &&\r\n                        (falseCloneTree[0].name === 'REVERT' &&\r\n                            falseCloneTree[0].items &&\r\n                            falseCloneTree[0].items.length === 0)) ||\r\n                    falseCloneTree[0].name === 'INVALID'\r\n                ) {\r\n                    state.instructions.push(new REQUIRE(jumpCondition));\r\n                    state.instructions.push(...trueCloneTree);\r\n                } else {\r\n                    state.instructions.push(\r\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\r\n                    );\r\n                }\r\n            } else {\r\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\r\n            }\r\n        } else {\r\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation, null, null, true));\r\n        }\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MLOAD } from './mload';\r\nimport * as eventHashes from '../../data/eventHashes.json';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport class LOG {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart?: any;\r\n    readonly memoryLength?: any;\r\n    readonly items?: any;\r\n    readonly topics: any;\r\n    readonly eventName?: string;\r\n\r\n    constructor(topics: any, items?: any, memoryStart?: any, memoryLength?: any) {\r\n        this.name = 'LOG';\r\n        this.wrapped = true;\r\n        this.topics = topics;\r\n        if (\r\n            this.topics.length > 0 &&\r\n            BigNumber.isInstance(this.topics[0]) &&\r\n            this.topics[0].toString(16) in eventHashes\r\n        ) {\r\n            this.eventName = (eventHashes as any)[this.topics[0].toString(16)].split('(')[0];\r\n            this.topics.shift();\r\n        }\r\n        if (this.memoryStart && this.memoryLength) {\r\n            this.memoryStart = memoryStart;\r\n            this.memoryLength = memoryLength;\r\n        } else {\r\n            this.items = items;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.eventName) {\r\n            return (\r\n                'emit ' + this.eventName + '(' + [...this.topics, ...this.items].join(', ') + ')'\r\n            );\r\n        } else {\r\n            return 'log(' + [...this.topics, ...this.items].join(', ') + ')';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const topicsCount = parseInt(opcode.name.replace('LOG', ''), 10);\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const topics = [];\r\n    for (let i = 0; i < topicsCount; i++) {\r\n        topics.push(state.stack.pop());\r\n    }\r\n    if (topics.length > 0) {\r\n        const eventTopic = topics[0].toString(16);\r\n        if (!(eventTopic in state.events)) {\r\n            state.events[eventTopic] = {};\r\n            state.events[eventTopic].indexedCount = topics.length - 1;\r\n            if (eventTopic in eventHashes) {\r\n                state.events[eventTopic].label = (eventHashes as any)[eventTopic];\r\n            }\r\n        }\r\n    }\r\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\r\n        const items = [];\r\n        for (\r\n            let i = memoryStart.toJSNumber();\r\n            i < memoryStart.add(memoryLength).toJSNumber();\r\n            i += 32\r\n        ) {\r\n            if (i in state.memory) {\r\n                items.push(state.memory[i]);\r\n            } else {\r\n                items.push(new MLOAD(i));\r\n            }\r\n        }\r\n        if (topics.length === 0) {\r\n            if (!('anonymous' in state.events)) {\r\n                state.events.anonymous = [];\r\n            }\r\n            state.events.anonymous.push({ items });\r\n        }\r\n        state.instructions.push(new LOG(topics, items));\r\n    } else {\r\n        state.instructions.push(new LOG(topics, [], memoryStart, memoryLength));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class LT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n    readonly equal: boolean;\r\n\r\n    constructor(left: any, right: any, equal: boolean = false) {\r\n        this.name = 'LT';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.equal = equal;\r\n    }\r\n\r\n    toString() {\r\n        if (this.equal) {\r\n            return stringify(this.left) + ' <= ' + stringify(this.right);\r\n        } else {\r\n            return stringify(this.left) + ' < ' + stringify(this.right);\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(BigNumber(left.lesser(right) === true ? 1 : 0));\r\n    } else {\r\n        state.stack.push(new LT(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class MLOAD {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n\r\n    constructor(location: any) {\r\n        this.name = 'MLOAD';\r\n        this.wrapped = true;\r\n        this.location = location;\r\n    }\r\n\r\n    toString() {\r\n        return 'memory[' + stringify(this.location) + ']';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryLocation = state.stack.pop();\r\n    if (BigNumber.isInstance(memoryLocation) && memoryLocation.toJSNumber() in state.memory) {\r\n        state.stack.push(state.memory[memoryLocation.toJSNumber()]);\r\n    } else {\r\n        state.stack.push(new MLOAD(memoryLocation));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class MOD {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'MOD';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' % ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.mod(right));\r\n    } else {\r\n        state.stack.push(new MOD(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class MSIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'MSIZE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'memory.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new MSIZE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class MSTORE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly data: any;\r\n\r\n    constructor(location: any, data: any) {\r\n        this.name = 'MSTORE';\r\n        this.wrapped = true;\r\n        this.location = location;\r\n        this.data = data;\r\n    }\r\n\r\n    toString() {\r\n        return 'memory[' + stringify(this.location) + '] = ' + stringify(this.data) + ';';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const storeLocation = state.stack.pop();\r\n    const storeData = state.stack.pop();\r\n    if (BigNumber.isInstance(storeLocation)) {\r\n        state.memory[storeLocation.toJSNumber()] = storeData;\r\n    } else {\r\n        state.instructions.push(new MSTORE(storeLocation, storeData));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class MUL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'MUL';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' * ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.multiply(right));\r\n    } else if (\r\n        (BigNumber.isInstance(left) && left.isZero()) ||\r\n        (BigNumber.isInstance(right) && right.isZero())\r\n    ) {\r\n        state.stack.push(BigNumber(0));\r\n    } else {\r\n        state.stack.push(new MUL(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MUL } from './mul';\r\nimport { MOD } from './mod';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    const mod = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right) && BigNumber.isInstance(mod)) {\r\n        state.stack.push(left.multiply(right).mod(mod));\r\n    } else if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(new MOD(left.multiply(right), mod));\r\n    } else {\r\n        state.stack.push(new MOD(new MUL(left, right), mod));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class NOT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly item: any;\r\n\r\n    constructor(item: any) {\r\n        this.name = 'AND';\r\n        this.wrapped = true;\r\n        this.item = item;\r\n    }\r\n\r\n    toString() {\r\n        return '~' + stringify(this.item);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const item = state.stack.pop();\r\n    if (BigNumber.isInstance(item)) {\r\n        state.stack.push(item.not());\r\n    } else {\r\n        state.stack.push(new NOT(item));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class NUMBER {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'NUMBER';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.number';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new NUMBER());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class OR {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'OR';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' || ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.or(right));\r\n    } else {\r\n        state.stack.push(new OR(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class ORIGIN {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'ORIGIN';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'tx.origin';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new ORIGIN());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(BigNumber(opcode.pc));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.pop();\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const pushDataLength = parseInt(opcode.name.replace('PUSH', ''), 10);\r\n    state.stack.push(BigNumber(opcode.pushData!.toString('hex'), 16));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MLOAD } from './mload';\r\nimport { hex2a } from '../utils/hex';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class RETURN {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart?: any;\r\n    readonly memoryLength?: any;\r\n    readonly items: any;\r\n\r\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\r\n        this.name = 'RETURN';\r\n        this.wrapped = true;\r\n        if (memoryStart && memoryLength) {\r\n            this.memoryStart = memoryStart;\r\n            this.memoryLength = memoryLength;\r\n        } else {\r\n            this.items = items;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.memoryStart && this.memoryLength) {\r\n            return (\r\n                'return memory[' +\r\n                stringify(this.memoryStart) +\r\n                ':(' +\r\n                stringify(this.memoryStart) +\r\n                '+' +\r\n                stringify(this.memoryLength) +\r\n                ')];'\r\n            );\r\n        } else if (this.items.length === 0) {\r\n            return 'return;';\r\n        } else if (\r\n            this.items.length === 1 &&\r\n            (BigNumber.isInstance(this.items[0]) || this.items[0].static)\r\n        ) {\r\n            return 'return ' + this.items[0] + ';';\r\n        } else if (\r\n            this.items.length === 3 &&\r\n            this.items.every((item: any) => BigNumber.isInstance(item)) &&\r\n            this.items[0].equals(32)\r\n        ) {\r\n            return 'return \"' + hex2a(this.items[2].toString(16)) + '\";';\r\n        } else {\r\n            return 'return(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    state.halted = true;\r\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\r\n        const items = [];\r\n        for (\r\n            let i = memoryStart.toJSNumber();\r\n            i < memoryStart.add(memoryLength).toJSNumber();\r\n            i += 32\r\n        ) {\r\n            if (i in state.memory) {\r\n                items.push(state.memory[i]);\r\n            } else {\r\n                items.push(new MLOAD(i));\r\n            }\r\n        }\r\n        state.instructions.push(new RETURN(items));\r\n    } else {\r\n        state.instructions.push(new RETURN([], memoryStart, memoryLength));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class RETURNDATACOPY {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly returnDataPosition: any;\r\n    readonly returnDataSize: any;\r\n\r\n    constructor(returnDataPosition: any, returnDataSize: any) {\r\n        this.name = 'RETURNDATACOPY';\r\n        this.wrapped = true;\r\n        this.returnDataPosition = returnDataPosition;\r\n        this.returnDataSize = returnDataSize;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'output[' +\r\n            stringify(this.returnDataPosition) +\r\n            ':(' +\r\n            stringify(this.returnDataPosition) +\r\n            '+' +\r\n            stringify(this.returnDataSize) +\r\n            ')]'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryPosition = state.stack.pop();\r\n    const returnDataPosition = state.stack.pop();\r\n    const returnDataSize = state.stack.pop();\r\n    state.memory[memoryPosition] = new RETURNDATACOPY(returnDataPosition, returnDataSize);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class RETURNDATASIZE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'RETURNDATASIZE';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'output.length';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new RETURNDATASIZE());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MLOAD } from './mload';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class REVERT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart?: any;\r\n    readonly memoryLength?: any;\r\n    readonly items: any;\r\n\r\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\r\n        this.name = 'REVERT';\r\n        this.wrapped = true;\r\n        if (memoryStart && memoryLength) {\r\n            this.memoryStart = memoryStart;\r\n            this.memoryLength = memoryLength;\r\n        } else {\r\n            this.items = items;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.items) {\r\n            return 'revert(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\r\n        } else {\r\n            return (\r\n                'revert(memory[' +\r\n                stringify(this.memoryStart) +\r\n                ':(' +\r\n                stringify(this.memoryStart) +\r\n                '+' +\r\n                stringify(this.memoryLength) +\r\n                ')]);'\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    state.halted = true;\r\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\r\n        const items = [];\r\n        for (\r\n            let i = memoryStart.toJSNumber();\r\n            i < memoryStart.add(memoryLength).toJSNumber();\r\n            i += 32\r\n        ) {\r\n            if (i in state.memory) {\r\n                items.push(state.memory[i]);\r\n            } else {\r\n                items.push(new MLOAD(i));\r\n            }\r\n        }\r\n        state.instructions.push(new REVERT(items));\r\n    } else {\r\n        state.instructions.push(new REVERT([], memoryStart, memoryLength));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SAR {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'SAR';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' >> ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.shiftRight(right));\r\n    } else {\r\n        state.stack.push(new SAR(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SELFDESTRUCT {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly address: any;\r\n\r\n    constructor(address: any) {\r\n        this.name = 'SELFDESTRUCT';\r\n        this.wrapped = true;\r\n        this.address = address;\r\n    }\r\n\r\n    toString() {\r\n        return 'selfdestruct(' + stringify(this.address) + ');';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const address = state.stack.pop();\r\n    state.halted = true;\r\n    state.instructions.push(new SELFDESTRUCT(address));\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { MLOAD } from './mload';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SHA3 {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly memoryStart?: any;\r\n    readonly memoryLength?: any;\r\n    readonly items: any;\r\n\r\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\r\n        this.name = 'SHA3';\r\n        this.wrapped = false;\r\n        if (memoryStart && memoryLength) {\r\n            this.memoryStart = memoryStart;\r\n            this.memoryLength = memoryLength;\r\n        } else {\r\n            this.items = items;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        if (this.items) {\r\n            return 'keccak256(' + this.items.map((item: any) => stringify(item)).join(', ') + ')';\r\n        } else {\r\n            return (\r\n                'keccak256(memory[' +\r\n                stringify(this.memoryStart) +\r\n                ':(' +\r\n                stringify(this.memoryStart) +\r\n                '+' +\r\n                stringify(this.memoryLength) +\r\n                ')])'\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\r\n        const items = [];\r\n        for (\r\n            let i = memoryStart.toJSNumber();\r\n            i < memoryStart.add(memoryLength).toJSNumber();\r\n            i += 32\r\n        ) {\r\n            if (i in state.memory) {\r\n                items.push(state.memory[i]);\r\n            } else {\r\n                items.push(new MLOAD(i));\r\n            }\r\n        }\r\n        state.stack.push(new SHA3(items));\r\n    } else {\r\n        state.stack.push(new SHA3([], memoryStart, memoryLength));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SHL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'SHL';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' << ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        if (right.valueOf() >= 256){\r\n            state.stack.push(BigNumber())\r\n        } else{\r\n        state.stack.push(left.shiftLeft(right));\r\n        }\r\n    } else {\r\n        state.stack.push(new SHL(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SHR {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'SHR';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' >>> ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.shiftRight(right));\r\n    } else {\r\n        state.stack.push(new SHR(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport { SHL } from './shl';\r\nimport { SAR } from './sar';\r\nimport { SUB } from './sub';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(\r\n            right.shiftLeft(BigNumber(32).subtract(left)).shiftRight(BigNumber(32).subtract(left))\r\n        );\r\n    } else if (BigNumber.isInstance(left)) {\r\n        state.stack.push(\r\n            new SAR(new SHL(right, BigNumber(32).subtract(left)), BigNumber(32).subtract(left))\r\n        );\r\n    } else {\r\n        state.stack.push(\r\n            new SAR(new SHL(right, new SUB(BigNumber(32), left)), new SUB(BigNumber(32), left))\r\n        );\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nconst parseMapping = (...items: any[]) => {\r\n    const mappings: any = [];\r\n    items.forEach((item2: any) => {\r\n        if (item2.name === 'SHA3' && item2.items) {\r\n            mappings.push(...parseMapping(...item2.items));\r\n        } else {\r\n            mappings.push(item2);\r\n        }\r\n    });\r\n    return mappings;\r\n};\r\n\r\nexport class MappingLoad {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly count: any;\r\n    readonly items: any;\r\n    readonly structlocation?: any;\r\n    readonly mappings: any;\r\n\r\n    constructor(mappings: any, location: any, items: any, count: any, structlocation?: any) {\r\n        this.name = 'MappingLoad';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n        this.count = count;\r\n        this.items = items;\r\n        this.structlocation = structlocation;\r\n        this.mappings = mappings;\r\n    }\r\n\r\n    toString() {\r\n        let mappingName = 'mapping' + (this.count + 1);\r\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\r\n            mappingName = this.mappings()[this.location].name;\r\n        }\r\n        if (this.structlocation) {\r\n            return (\r\n                mappingName +\r\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\r\n                '[' +\r\n                this.structlocation.toString() +\r\n                ']'\r\n            );\r\n        } else {\r\n            return (\r\n                mappingName + this.items.map((item: any) => '[' + stringify(item) + ']').join('')\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SLOAD {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly variables: any;\r\n\r\n    constructor(location: any, variables: any) {\r\n        this.name = 'SLOAD';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n        this.variables = variables;\r\n    }\r\n\r\n    toString() {\r\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\r\n            if (this.variables()[this.location.toString()].label) {\r\n                return this.variables()[this.location.toString()].label;\r\n            } else {\r\n                return (\r\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1)\r\n                );\r\n            }\r\n        } else {\r\n            return 'storage[' + stringify(this.location) + ']';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const storeLocation = state.stack.pop();\r\n    if (storeLocation.name === 'SHA3') {\r\n        const mappingItems = parseMapping(...storeLocation.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.stack.push(\r\n                new MappingLoad(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\r\n                )\r\n            );\r\n        } else {\r\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\r\n        }\r\n    } else if (\r\n        storeLocation.name === 'ADD' &&\r\n        storeLocation.left.name === 'SHA3' &&\r\n        BigNumber.isInstance(storeLocation.right)\r\n    ) {\r\n        const mappingItems = parseMapping(...storeLocation.left.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.stack.push(\r\n                new MappingLoad(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\r\n                    storeLocation.right\r\n                )\r\n            );\r\n        } else {\r\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\r\n        }\r\n    } else if (\r\n        storeLocation.name === 'ADD' &&\r\n        BigNumber.isInstance(storeLocation.left) &&\r\n        storeLocation.right.name === 'SHA3'\r\n    ) {\r\n        const mappingItems = parseMapping(...storeLocation.right.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.stack.push(\r\n                new MappingLoad(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\r\n                    storeLocation.left\r\n                )\r\n            );\r\n        } else {\r\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\r\n        }\r\n    } else {\r\n        state.stack.push(new SLOAD(storeLocation, () => state.variables));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\nimport { Variable } from './jumpi';\r\n\r\nconst parseMapping = (...items: any[]) => {\r\n    const mappings: any = [];\r\n    items.forEach((item2: any) => {\r\n        if (item2.name === 'SHA3' && item2.items) {\r\n            mappings.push(...parseMapping(...item2.items));\r\n        } else {\r\n            mappings.push(item2);\r\n        }\r\n    });\r\n    return mappings;\r\n};\r\n\r\nexport class MappingStore {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly count: any;\r\n    readonly items: any;\r\n    readonly data: any;\r\n    readonly structlocation?: any;\r\n    readonly mappings: any;\r\n\r\n    constructor(\r\n        mappings: any,\r\n        location: any,\r\n        items: any,\r\n        data: any,\r\n        count: any,\r\n        structlocation?: any\r\n    ) {\r\n        this.name = 'MappingStore';\r\n        this.wrapped = false;\r\n        this.location = location;\r\n        this.items = items;\r\n        this.data = data;\r\n        this.count = count;\r\n        this.structlocation = structlocation;\r\n        this.mappings = mappings;\r\n    }\r\n\r\n    toString() {\r\n        let mappingName = 'mapping' + (this.count + 1);\r\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\r\n            mappingName = this.mappings()[this.location].name;\r\n        }\r\n        if (\r\n            this.data.name === 'ADD' &&\r\n            this.data.right.name === 'MappingLoad' &&\r\n            stringify(this.data.right.location) === stringify(this.location)\r\n        ) {\r\n            return (\r\n                mappingName +\r\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\r\n                ' += ' +\r\n                stringify(this.data.left) +\r\n                ';'\r\n            );\r\n        } else if (\r\n            this.data.name === 'SUB' &&\r\n            this.data.left.name === 'MappingLoad' &&\r\n            stringify(this.data.left.location) === stringify(this.location)\r\n        ) {\r\n            return (\r\n                mappingName +\r\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\r\n                ' -= ' +\r\n                stringify(this.data.right) +\r\n                ';'\r\n            );\r\n        } else {\r\n            return (\r\n                mappingName +\r\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\r\n                ' = ' +\r\n                stringify(this.data) +\r\n                ';'\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class SSTORE {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly location: any;\r\n    readonly data: any;\r\n    readonly variables: any;\r\n\r\n    constructor(location: any, data: any, variables: any) {\r\n        this.name = 'SSTORE';\r\n        this.wrapped = true;\r\n        this.location = location;\r\n        this.data = data;\r\n        this.variables = variables;\r\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\r\n            this.variables()[this.location.toString()].types.push(() => this.data.type);\r\n        } else if (\r\n            BigNumber.isInstance(this.location) &&\r\n            !(this.location.toString() in this.variables())\r\n        ) {\r\n            this.variables()[this.location.toString()] = new Variable(false, [\r\n                () => this.data.type\r\n            ]);\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        let variableName = 'storage[' + stringify(this.location) + ']';\r\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\r\n            if (this.variables()[this.location.toString()].label) {\r\n                variableName = this.variables()[this.location.toString()].label;\r\n            } else {\r\n                variableName =\r\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1);\r\n            }\r\n        }\r\n        if (\r\n            this.data.name === 'ADD' &&\r\n            this.data.right.name === 'SLOAD' &&\r\n            stringify(this.data.right.location) === stringify(this.location)\r\n        ) {\r\n            return variableName + ' += ' + stringify(this.data.left) + ';';\r\n        } else if (\r\n            this.data.name === 'SUB' &&\r\n            this.data.left.name === 'SLOAD' &&\r\n            stringify(this.data.left.location) === stringify(this.location)\r\n        ) {\r\n            return variableName + ' -= ' + stringify(this.data.right) + ';';\r\n        } else {\r\n            return variableName + ' = ' + stringify(this.data) + ';';\r\n        }\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const storeLocation = state.stack.pop();\r\n    const storeData = state.stack.pop();\r\n    if (storeLocation.name === 'SHA3') {\r\n        const mappingItems = parseMapping(...storeLocation.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.mappings[mappingLocation].values.push(storeData);\r\n            state.instructions.push(\r\n                new MappingStore(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    storeData,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\r\n                )\r\n            );\r\n        } else {\r\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n        }\r\n    } else if (\r\n        storeLocation.name === 'ADD' &&\r\n        storeLocation.left.name === 'SHA3' &&\r\n        BigNumber.isInstance(storeLocation.right)\r\n    ) {\r\n        const mappingItems = parseMapping(...storeLocation.left.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.instructions.push(\r\n                new MappingStore(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    storeData,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\r\n                    storeLocation.right\r\n                )\r\n            );\r\n        } else {\r\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n        }\r\n    } else if (\r\n        storeLocation.name === 'ADD' &&\r\n        BigNumber.isInstance(storeLocation.left) &&\r\n        storeLocation.right.name === 'SHA3'\r\n    ) {\r\n        const mappingItems = parseMapping(...storeLocation.right.items);\r\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\r\n            BigNumber.isInstance(mappingItem)\r\n        );\r\n        const mappingParts = mappingItems.filter(\r\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\r\n        );\r\n        if (mappingLocation && mappingParts.length > 0) {\r\n            if (!(mappingLocation in state.mappings)) {\r\n                state.mappings[mappingLocation] = {\r\n                    name: false,\r\n                    structs: [],\r\n                    keys: [],\r\n                    values: []\r\n                };\r\n            }\r\n            state.mappings[mappingLocation].keys.push(mappingParts);\r\n            state.instructions.push(\r\n                new MappingStore(\r\n                    () => state.mappings,\r\n                    mappingLocation,\r\n                    mappingParts,\r\n                    storeData,\r\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\r\n                    storeLocation.left\r\n                )\r\n            );\r\n        } else {\r\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n        }\r\n    } else if (\r\n        false &&\r\n        BigNumber.isInstance(storeLocation) &&\r\n        storeLocation.toString() in state.variables &&\r\n        storeData.type &&\r\n        !state.variables[storeLocation.toString()].types.includes(storeData.type)\r\n    ) {\r\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n        state.variables[storeLocation.toString()].types.push(storeData.type);\r\n    } else {\r\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class STATICCALL {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly gas: any;\r\n    readonly address: any;\r\n    readonly memoryStart: any;\r\n    readonly memoryLength: any;\r\n    readonly outputStart: any;\r\n    readonly outputLength: any;\r\n\r\n    constructor(\r\n        gas: any,\r\n        address: any,\r\n        memoryStart: any,\r\n        memoryLength: any,\r\n        outputStart: any,\r\n        outputLength: any\r\n    ) {\r\n        this.name = 'STATICCALL';\r\n        this.wrapped = true;\r\n        this.gas = gas;\r\n        this.address = address;\r\n        this.memoryStart = memoryStart;\r\n        this.memoryLength = memoryLength;\r\n        this.outputStart = outputStart;\r\n        this.outputLength = outputLength;\r\n    }\r\n\r\n    toString() {\r\n        return (\r\n            'staticcall(' +\r\n            stringify(this.gas) +\r\n            ',' +\r\n            stringify(this.address) +\r\n            ',' +\r\n            stringify(this.memoryStart) +\r\n            ',' +\r\n            stringify(this.memoryLength) +\r\n            ',' +\r\n            stringify(this.outputStart) +\r\n            ',' +\r\n            stringify(this.outputLength) +\r\n            ')'\r\n        );\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const gas = state.stack.pop();\r\n    const address = state.stack.pop();\r\n    const memoryStart = state.stack.pop();\r\n    const memoryLength = state.stack.pop();\r\n    const outputStart = state.stack.pop();\r\n    const outputLength = state.stack.pop();\r\n    state.stack.push(\r\n        new STATICCALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\r\n    );\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class STOP {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'STOP';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'return;';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.halted = true;\r\n    state.instructions.push(new STOP());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class SUB {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'SUB';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' - ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.subtract(right));\r\n    } else {\r\n        state.stack.push(new SUB(left, right));\r\n    }\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const swapLocation = parseInt(opcode.name.replace('SWAP', ''), 10);\r\n    state.stack.swap(swapLocation);\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\n\r\nexport class TIMESTAMP {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n\r\n    constructor() {\r\n        this.name = 'TIMESTAMP';\r\n        this.wrapped = false;\r\n    }\r\n\r\n    toString() {\r\n        return 'block.timestamp';\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    state.stack.push(new TIMESTAMP());\r\n};\r\n","import EVM from '../classes/evm.class';\r\nimport Opcode from '../interfaces/opcode.interface';\r\nimport * as BigNumber from '../../node_modules/big-integer';\r\nimport stringify from '../utils/stringify';\r\n\r\nexport class XOR {\r\n    readonly name: string;\r\n    readonly type?: string;\r\n    readonly wrapped: boolean;\r\n    readonly left: any;\r\n    readonly right: any;\r\n\r\n    constructor(left: any, right: any) {\r\n        this.name = 'XOR';\r\n        this.wrapped = true;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    toString() {\r\n        return stringify(this.left) + ' ^ ' + stringify(this.right);\r\n    }\r\n}\r\n\r\nexport default (opcode: Opcode, state: EVM): void => {\r\n    const left = state.stack.pop();\r\n    const right = state.stack.pop();\r\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\r\n        state.stack.push(left.xor(right));\r\n    } else {\r\n        state.stack.push(new XOR(left, right));\r\n    }\r\n};\r\n","export function hex2a(hexx: any) {\r\n    const hex = hexx.toString();\r\n    let str = '';\r\n    for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\r\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\r\n    }\r\n    return str;\r\n}\r\n\r\nexport function pad32(data: string) {\r\n    if (data.length >= 64) {\r\n        return data;\r\n    } else {\r\n        return '0'.repeat(64 - data.length) + data;\r\n    }\r\n}\r\n\r\nexport function isHex(h: any) {\r\n    return /^[0-9a-f-]+$/.test(h);\r\n}\r\n\r\nexport default (data: any) => {\r\n    if (isHex(data)) {\r\n        const pieces = data.match(/.{1,64}/g);\r\n        if (pieces.length === 3 && parseInt(pieces[0], 16) === 32) {\r\n            const stringLength = parseInt(pieces[1], 16) * 2;\r\n            const stringData = hex2a(pieces[2].substr(0, stringLength));\r\n            return '\"' + stringData + '\"';\r\n        } else if (!isNaN(parseInt(data, 16))) {\r\n            return parseInt(data, 16).toString();\r\n        } else {\r\n            return data;\r\n        }\r\n    } else {\r\n        return data;\r\n    }\r\n};\r\n","import STOP from '../opcodes/stop';\r\nimport ADD from '../opcodes/add';\r\nimport MUL from '../opcodes/mul';\r\nimport SUB from '../opcodes/sub';\r\nimport DIV from '../opcodes/div';\r\nimport MOD from '../opcodes/mod';\r\nimport ADDMOD from '../opcodes/addmod';\r\nimport MULMOD from '../opcodes/mulmod';\r\nimport EXP from '../opcodes/exp';\r\nimport SIGNEXTEND from '../opcodes/signextend';\r\nimport LT from '../opcodes/lt';\r\nimport GT from '../opcodes/gt';\r\nimport EQ from '../opcodes/eq';\r\nimport ISZERO from '../opcodes/iszero';\r\nimport AND from '../opcodes/and';\r\nimport OR from '../opcodes/or';\r\nimport XOR from '../opcodes/xor';\r\nimport NOT from '../opcodes/not';\r\nimport BYTE from '../opcodes/byte';\r\nimport SHL from '../opcodes/shl';\r\nimport SHR from '../opcodes/shr';\r\nimport SAR from '../opcodes/sar';\r\nimport SHA3 from '../opcodes/sha3';\r\nimport ADDRESS from '../opcodes/address';\r\nimport BALANCE from '../opcodes/balance';\r\nimport ORIGIN from '../opcodes/origin';\r\nimport CALLER from '../opcodes/caller';\r\nimport CALLVALUE from '../opcodes/callvalue';\r\nimport CALLDATALOAD from '../opcodes/calldataload';\r\nimport CALLDATASIZE from '../opcodes/calldatasize';\r\nimport CALLDATACOPY from '../opcodes/calldatacopy';\r\nimport CODESIZE from '../opcodes/codesize';\r\nimport CODECOPY from '../opcodes/codecopy';\r\nimport GASPRICE from '../opcodes/gasprice';\r\nimport EXTCODESIZE from '../opcodes/extcodesize';\r\nimport EXTCODECOPY from '../opcodes/extcodecopy';\r\nimport RETURNDATASIZE from '../opcodes/returndatasize';\r\nimport RETURNDATACOPY from '../opcodes/returndatacopy';\r\nimport EXTCODEHASH from '../opcodes/extcodehash';\r\nimport BLOCKHASH from '../opcodes/blockhash';\r\nimport COINBASE from '../opcodes/coinbase';\r\nimport TIMESTAMP from '../opcodes/timestamp';\r\nimport NUMBER from '../opcodes/number';\r\nimport DIFFICULTY from '../opcodes/difficulty';\r\nimport GASLIMIT from '../opcodes/gaslimit';\r\nimport POP from '../opcodes/pop';\r\nimport MLOAD from '../opcodes/mload';\r\nimport MSTORE from '../opcodes/mstore';\r\nimport SLOAD from '../opcodes/sload';\r\nimport SSTORE from '../opcodes/sstore';\r\nimport JUMP from '../opcodes/jump';\r\nimport JUMPI from '../opcodes/jumpi';\r\nimport PC from '../opcodes/pc';\r\nimport MSIZE from '../opcodes/msize';\r\nimport GAS from '../opcodes/gas';\r\nimport JUMPDEST from '../opcodes/jumpdest';\r\nimport PUSH from '../opcodes/push';\r\nimport DUP from '../opcodes/dup';\r\nimport SWAP from '../opcodes/swap';\r\nimport LOG from '../opcodes/log';\r\nimport CREATE from '../opcodes/create';\r\nimport CALL from '../opcodes/call';\r\nimport CALLCODE from '../opcodes/callcode';\r\nimport RETURN from '../opcodes/return';\r\nimport DELEGATECALL from '../opcodes/delegatecall';\r\nimport CREATE2 from '../opcodes/create2';\r\nimport STATICCALL from '../opcodes/staticcall';\r\nimport REVERT from '../opcodes/revert';\r\nimport INVALID from '../opcodes/invalid';\r\nimport SELFDESTRUCT from '../opcodes/selfdestruct';\r\n\r\nexport default {\r\n    STOP,\r\n    ADD,\r\n    MUL,\r\n    SUB,\r\n    DIV,\r\n    SDIV: DIV,\r\n    MOD,\r\n    SMOD: MOD,\r\n    ADDMOD,\r\n    MULMOD,\r\n    EXP,\r\n    SIGNEXTEND,\r\n    LT,\r\n    GT,\r\n    SLT: LT,\r\n    SGT: GT,\r\n    EQ,\r\n    ISZERO,\r\n    AND,\r\n    OR,\r\n    XOR,\r\n    NOT,\r\n    BYTE,\r\n    SHL,\r\n    SHR,\r\n    SAR,\r\n    SHA3,\r\n    ADDRESS,\r\n    BALANCE,\r\n    ORIGIN,\r\n    CALLER,\r\n    CALLVALUE,\r\n    CALLDATALOAD,\r\n    CALLDATASIZE,\r\n    CALLDATACOPY,\r\n    CODESIZE,\r\n    CODECOPY,\r\n    GASPRICE,\r\n    EXTCODESIZE,\r\n    EXTCODECOPY,\r\n    RETURNDATASIZE,\r\n    RETURNDATACOPY,\r\n    EXTCODEHASH,\r\n    BLOCKHASH,\r\n    COINBASE,\r\n    TIMESTAMP,\r\n    NUMBER,\r\n    DIFFICULTY,\r\n    GASLIMIT,\r\n    POP,\r\n    MLOAD,\r\n    MSTORE,\r\n    MSTORE8: MSTORE,\r\n    SLOAD,\r\n    SSTORE,\r\n    JUMP,\r\n    JUMPI,\r\n    PC,\r\n    MSIZE,\r\n    GAS,\r\n    JUMPDEST,\r\n    PUSH1: PUSH,\r\n    PUSH2: PUSH,\r\n    PUSH3: PUSH,\r\n    PUSH4: PUSH,\r\n    PUSH5: PUSH,\r\n    PUSH6: PUSH,\r\n    PUSH7: PUSH,\r\n    PUSH8: PUSH,\r\n    PUSH9: PUSH,\r\n    PUSH10: PUSH,\r\n    PUSH11: PUSH,\r\n    PUSH12: PUSH,\r\n    PUSH13: PUSH,\r\n    PUSH14: PUSH,\r\n    PUSH15: PUSH,\r\n    PUSH16: PUSH,\r\n    PUSH17: PUSH,\r\n    PUSH18: PUSH,\r\n    PUSH19: PUSH,\r\n    PUSH20: PUSH,\r\n    PUSH21: PUSH,\r\n    PUSH22: PUSH,\r\n    PUSH23: PUSH,\r\n    PUSH24: PUSH,\r\n    PUSH25: PUSH,\r\n    PUSH26: PUSH,\r\n    PUSH27: PUSH,\r\n    PUSH28: PUSH,\r\n    PUSH29: PUSH,\r\n    PUSH30: PUSH,\r\n    PUSH31: PUSH,\r\n    PUSH32: PUSH,\r\n    DUP1: DUP,\r\n    DUP2: DUP,\r\n    DUP3: DUP,\r\n    DUP4: DUP,\r\n    DUP5: DUP,\r\n    DUP6: DUP,\r\n    DUP7: DUP,\r\n    DUP8: DUP,\r\n    DUP9: DUP,\r\n    DUP10: DUP,\r\n    DUP11: DUP,\r\n    DUP12: DUP,\r\n    DUP13: DUP,\r\n    DUP14: DUP,\r\n    DUP15: DUP,\r\n    DUP16: DUP,\r\n    SWAP1: SWAP,\r\n    SWAP2: SWAP,\r\n    SWAP3: SWAP,\r\n    SWAP4: SWAP,\r\n    SWAP5: SWAP,\r\n    SWAP6: SWAP,\r\n    SWAP7: SWAP,\r\n    SWAP8: SWAP,\r\n    SWAP9: SWAP,\r\n    SWAP10: SWAP,\r\n    SWAP11: SWAP,\r\n    SWAP12: SWAP,\r\n    SWAP13: SWAP,\r\n    SWAP14: SWAP,\r\n    SWAP15: SWAP,\r\n    SWAP16: SWAP,\r\n    LOG0: LOG,\r\n    LOG1: LOG,\r\n    LOG2: LOG,\r\n    LOG3: LOG,\r\n    LOG4: LOG,\r\n    CREATE,\r\n    CALL,\r\n    CALLCODE,\r\n    RETURN,\r\n    DELEGATECALL,\r\n    CREATE2,\r\n    STATICCALL,\r\n    REVERT,\r\n    INVALID,\r\n    SELFDESTRUCT\r\n};\r\n","import * as BigNumber from '../../node_modules/big-integer';\r\n\r\nexport default (item: any) => {\r\n    if (BigNumber.isInstance(item)) {\r\n        return item.toString(16);\r\n    } else if (!item.wrapped) {\r\n        return item.toString();\r\n    } else {\r\n        return '(' + item.toString() + ')';\r\n    }\r\n};\r\n","export default (stateEvents: any, events: string[]) => {\r\n    const stateEventValues = Object.keys(stateEvents).map((key: string) => stateEvents[key]);\r\n    let output = '';\r\n\r\n    events.forEach((event: string) => {\r\n        const eventName = event.split('(')[0];\r\n        const eventArguments = event\r\n            .replace(eventName, '')\r\n            .substring(1)\r\n            .slice(0, -1);\r\n        output += 'event ';\r\n        if (eventArguments) {\r\n            output += eventName + '(';\r\n            output += eventArguments\r\n                .split(',')\r\n                .map((a: string, i: number) => {\r\n                    const stateEvent = stateEventValues.find((e: any) => e.label === event);\r\n                    if (stateEvent && i < stateEvent.indexedCount) {\r\n                        return a + ' indexed _arg' + i;\r\n                    } else {\r\n                        return a + ' _arg' + i;\r\n                    }\r\n                })\r\n                .join(', ');\r\n            output += ')';\r\n        } else {\r\n            output += event;\r\n        }\r\n        output += '\\n';\r\n    });\r\n\r\n    if (events.length > 0) {\r\n        output += '\\n';\r\n    }\r\n\r\n    return output;\r\n};\r\n","import stringifyInstructions from './stringifyInstructions';\r\nimport * as functionHashes from '../../data/functionHashes.json';\r\n\r\nexport default (functionName: string, functionInstance: any): string => {\r\n    let output = '';\r\n    output += 'function ';\r\n    if (functionName in functionHashes) {\r\n        const fullFunction = (functionHashes as any)[functionName];\r\n        const fullFunctionName = fullFunction.split('(')[0];\r\n        const fullFunctionArguments = fullFunction\r\n            .replace(fullFunctionName, '')\r\n            .substring(1)\r\n            .slice(0, -1);\r\n        if (fullFunctionArguments) {\r\n            output += fullFunctionName + '(';\r\n            output += fullFunctionArguments\r\n                .split(',')\r\n                .map((a: string, i: number) => a + ' _arg' + i)\r\n                .join(', ');\r\n            output += ')';\r\n        } else {\r\n            output += fullFunction;\r\n        }\r\n    } else {\r\n        output += functionName + '()';\r\n    }\r\n    output += ' ' + functionInstance.visibility;\r\n    if (functionInstance.constant) {\r\n        output += ' view';\r\n    }\r\n    if (functionInstance.payable) {\r\n        output += ' payable';\r\n    }\r\n    if (functionInstance.returns.length > 0) {\r\n        output += ' returns (' + functionInstance.returns.join(', ') + ')';\r\n    }\r\n    output += ' {\\n';\r\n    output += stringifyInstructions(functionInstance.items, 4);\r\n    output += '}\\n\\n';\r\n    return output;\r\n};\r\n","export const stringifyInstructions = (instructionTree: any, indentation = 0): string => {\r\n    let instructionLines = '';\r\n    instructionTree.forEach((instruction: any) => {\r\n        if (instruction.name === 'JUMPI' && instruction.false) {\r\n            const condition = instruction.toString();\r\n            const falseInstructions = instruction.false.filter((i: any) => i.debugLevel > 0);\r\n            if (falseInstructions.length === 1 && falseInstructions[0].name === 'JUMPI') {\r\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\r\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\r\n                instructionLines += ' '.repeat(indentation) + '} else ';\r\n                const elseOrElseIf = stringifyInstructions(instruction.false, indentation);\r\n                if (elseOrElseIf.trim().startsWith('if')) {\r\n                    instructionLines += elseOrElseIf.trim() + '\\n';\r\n                } else {\r\n                    instructionLines +=\r\n                        '{\\n' +\r\n                        elseOrElseIf\r\n                            .split('\\n')\r\n                            .filter(l => l)\r\n                            .map(l => ' '.repeat(4) + l)\r\n                            .join('\\n');\r\n                    instructionLines += '\\n' + ' '.repeat(indentation) + '}\\n';\r\n                }\r\n            } else {\r\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\r\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\r\n                instructionLines += ' '.repeat(indentation) + '} else {\\n';\r\n                instructionLines += stringifyInstructions(instruction.false, indentation + 4);\r\n                instructionLines += ' '.repeat(indentation) + '}\\n';\r\n            }\r\n        } else {\r\n            instructionLines += ' '.repeat(indentation) + instruction.toString() + '\\n';\r\n        }\r\n    });\r\n    return instructionLines;\r\n};\r\n\r\nexport default stringifyInstructions;\r\n","const stringifyMapping = (mapping: any) => {\r\n    const mappingKey: string[] = [];\r\n    const mappingValue: string[] = [];\r\n    let deepMapping = false;\r\n    mapping.keys\r\n        .filter((mappingChild: any) => mappingChild.length > 0)\r\n        .forEach((mappingChild: any) => {\r\n            if (\r\n                mappingChild.length > 0 &&\r\n                mappingChild[0].type &&\r\n                !mappingKey.includes(mappingChild[0].type)\r\n            ) {\r\n                mappingKey.push(mappingChild[0].type);\r\n            }\r\n            if (mappingChild.length > 1 && !deepMapping) {\r\n                deepMapping = true;\r\n                mappingValue.push(\r\n                    stringifyMapping({\r\n                        name: mapping.name,\r\n                        structs: mapping.structs,\r\n                        keys: mapping.keys.map((items: any) => {\r\n                            items.shift();\r\n                            return items;\r\n                        }),\r\n                        values: mapping.values\r\n                    })\r\n                );\r\n            } else if (mappingChild.length === 1 && !deepMapping) {\r\n                mapping.values.forEach((mappingChild2: any) => {\r\n                    if (mappingChild2.type && !mappingValue.includes(mappingChild2.type)) {\r\n                        mappingValue.push(mappingChild2.type);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    if (mappingKey.length === 0) {\r\n        mappingKey.push('unknown');\r\n    }\r\n    if (mapping.structs.length > 0 && mappingValue.length === 0) {\r\n        mappingValue.push(mapping.name + 'Struct');\r\n    } else if (mappingValue.length === 0) {\r\n        mappingValue.push('unknown');\r\n    }\r\n    return 'mapping (' + mappingKey.join('|') + ' => ' + mappingValue.join('|') + ')';\r\n};\r\n\r\nexport default (mappings: any) => {\r\n    let output = '';\r\n\r\n    Object.keys(mappings).forEach((key: string, index: number) => {\r\n        const mapping = mappings[key];\r\n        if (mapping.name) {\r\n            output += stringifyMapping(mapping) + ' public ' + mapping.name + ';';\r\n        } else {\r\n            output += stringifyMapping(mapping) + ' mapping' + (index + 1) + ';';\r\n        }\r\n        output += '\\n';\r\n    });\r\n\r\n    if (Object.keys(mappings).length > 0) {\r\n        output += '\\n';\r\n    }\r\n\r\n    return output;\r\n};\r\n","export default (mappings: any) => {\r\n    let output = '';\r\n\r\n    Object.keys(mappings)\r\n        .filter((key: any) => mappings[key].structs.length > 0)\r\n        .forEach((key: string, index: number) => {\r\n            const mapping = mappings[key];\r\n            output += 'struct ' + mapping.name + 'Struct {\\n';\r\n            mapping.structs.forEach((struct: any) => {\r\n                output += '    ' + struct.toString() + ';\\n';\r\n            });\r\n            output += '}\\n\\n';\r\n        });\r\n\r\n    return output;\r\n};\r\n","export default (variables: any) => {\r\n    let output = '';\r\n\r\n    Object.keys(variables).forEach((key: string, index: number) => {\r\n        const variable = variables[key];\r\n        const types = variable.types\r\n            .map((type: any) => {\r\n                if (typeof type === 'function') {\r\n                    return type();\r\n                } else {\r\n                    return type;\r\n                }\r\n            })\r\n            .filter((type: any) => type);\r\n        if (types.length === 0) {\r\n            types.push('unknown');\r\n        }\r\n        if (variable.label) {\r\n            output += [...new Set(types)].join('|') + ' public ' + variable.label + ';';\r\n        } else {\r\n            output += [...new Set(types)].join('|') + ' var' + (index + 1).toString() + ';';\r\n            index++;\r\n        }\r\n        output += '\\n';\r\n    });\r\n\r\n    if (Object.keys(variables).length > 0) {\r\n        output += '\\n';\r\n    }\r\n\r\n    return output;\r\n};\r\n"],"sourceRoot":""}